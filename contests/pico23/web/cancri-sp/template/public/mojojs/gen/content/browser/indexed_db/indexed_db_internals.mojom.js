// content/browser/indexed_db/indexed_db_internals.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/browser/indexed_db/indexed_db_internals.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('storage.mojom');
  var indexed_db_bucket_types$ =
      mojo.internal.exposeNamespace('storage.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/services/storage/privileged/mojom/indexed_db_bucket_types.mojom', '../../../components/services/storage/privileged/mojom/indexed_db_bucket_types.mojom.js');
  }
  var bucket_id$ =
      mojo.internal.exposeNamespace('storage.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/services/storage/public/mojom/buckets/bucket_id.mojom', '../../../components/services/storage/public/mojom/buckets/bucket_id.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../mojo/public/mojom/base/file_path.mojom.js');
  }



  function IdbPartitionMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbPartitionMetadata.prototype.initDefaults_ = function() {
    this.partitionPath = null;
    this.originList = null;
  };
  IdbPartitionMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbPartitionMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbPartitionMetadata.partitionPath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbPartitionMetadata.originList
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(indexed_db_bucket_types$.IdbOriginMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbPartitionMetadata.encodedSize = codec.kStructHeaderSize + 16;

  IdbPartitionMetadata.decode = function(decoder) {
    var packed;
    var val = new IdbPartitionMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.partitionPath =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.originList =
        decoder.decodeArrayPointer(new codec.PointerTo(indexed_db_bucket_types$.IdbOriginMetadata));
    return val;
  };

  IdbPartitionMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbPartitionMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.partitionPath);
    encoder.encodeArrayPointer(new codec.PointerTo(indexed_db_bucket_types$.IdbOriginMetadata), val.originList);
  };
  function IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.prototype.initDefaults_ = function() {
  };
  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.encodedSize = codec.kStructHeaderSize + 0;

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.decode = function(decoder) {
    var packed;
    var val = new IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.prototype.initDefaults_ = function() {
    this.error = null;
    this.partitions = null;
  };
  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.error
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.partitions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(IdbPartitionMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(codec.NullableString);
    val.partitions =
        decoder.decodeArrayPointer(new codec.PointerTo(IdbPartitionMetadata));
    return val;
  };

  IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.error);
    encoder.encodeArrayPointer(new codec.PointerTo(IdbPartitionMetadata), val.partitions);
  };
  function IdbInternalsHandler_DownloadBucketData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbInternalsHandler_DownloadBucketData_Params.prototype.initDefaults_ = function() {
    this.bucketId = null;
  };
  IdbInternalsHandler_DownloadBucketData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbInternalsHandler_DownloadBucketData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbInternalsHandler_DownloadBucketData_Params.bucketId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bucket_id$.BucketId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbInternalsHandler_DownloadBucketData_Params.encodedSize = codec.kStructHeaderSize + 8;

  IdbInternalsHandler_DownloadBucketData_Params.decode = function(decoder) {
    var packed;
    var val = new IdbInternalsHandler_DownloadBucketData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bucketId =
        decoder.decodeStructPointer(bucket_id$.BucketId);
    return val;
  };

  IdbInternalsHandler_DownloadBucketData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbInternalsHandler_DownloadBucketData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bucket_id$.BucketId, val.bucketId);
  };
  function IdbInternalsHandler_DownloadBucketData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbInternalsHandler_DownloadBucketData_ResponseParams.prototype.initDefaults_ = function() {
    this.error = null;
    this.connectionCount = 0;
  };
  IdbInternalsHandler_DownloadBucketData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbInternalsHandler_DownloadBucketData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbInternalsHandler_DownloadBucketData_ResponseParams.error
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IdbInternalsHandler_DownloadBucketData_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  IdbInternalsHandler_DownloadBucketData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IdbInternalsHandler_DownloadBucketData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(codec.NullableString);
    val.connectionCount =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  IdbInternalsHandler_DownloadBucketData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbInternalsHandler_DownloadBucketData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.error);
    encoder.encodeStruct(codec.Uint64, val.connectionCount);
  };
  function IdbInternalsHandler_ForceClose_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbInternalsHandler_ForceClose_Params.prototype.initDefaults_ = function() {
    this.bucketId = null;
  };
  IdbInternalsHandler_ForceClose_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbInternalsHandler_ForceClose_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbInternalsHandler_ForceClose_Params.bucketId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bucket_id$.BucketId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbInternalsHandler_ForceClose_Params.encodedSize = codec.kStructHeaderSize + 8;

  IdbInternalsHandler_ForceClose_Params.decode = function(decoder) {
    var packed;
    var val = new IdbInternalsHandler_ForceClose_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bucketId =
        decoder.decodeStructPointer(bucket_id$.BucketId);
    return val;
  };

  IdbInternalsHandler_ForceClose_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbInternalsHandler_ForceClose_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bucket_id$.BucketId, val.bucketId);
  };
  function IdbInternalsHandler_ForceClose_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbInternalsHandler_ForceClose_ResponseParams.prototype.initDefaults_ = function() {
    this.error = null;
    this.connectionCount = 0;
  };
  IdbInternalsHandler_ForceClose_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbInternalsHandler_ForceClose_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbInternalsHandler_ForceClose_ResponseParams.error
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IdbInternalsHandler_ForceClose_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  IdbInternalsHandler_ForceClose_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IdbInternalsHandler_ForceClose_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(codec.NullableString);
    val.connectionCount =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  IdbInternalsHandler_ForceClose_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbInternalsHandler_ForceClose_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.error);
    encoder.encodeStruct(codec.Uint64, val.connectionCount);
  };
  var kIdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Name = 1940727854;
  var kIdbInternalsHandler_DownloadBucketData_Name = 419300590;
  var kIdbInternalsHandler_ForceClose_Name = 110075109;

  function IdbInternalsHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IdbInternalsHandler,
                                                   handleOrPtrInfo);
  }

  function IdbInternalsHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IdbInternalsHandler, associatedInterfacePtrInfo);
  }

  IdbInternalsHandlerAssociatedPtr.prototype =
      Object.create(IdbInternalsHandlerPtr.prototype);
  IdbInternalsHandlerAssociatedPtr.prototype.constructor =
      IdbInternalsHandlerAssociatedPtr;

  function IdbInternalsHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  IdbInternalsHandlerPtr.prototype.getAllBucketsAcrossAllStorageKeys = function() {
    return IdbInternalsHandlerProxy.prototype.getAllBucketsAcrossAllStorageKeys
        .apply(this.ptr.getProxy(), arguments);
  };

  IdbInternalsHandlerProxy.prototype.getAllBucketsAcrossAllStorageKeys = function() {
    var params_ = new IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kIdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Name,
          codec.align(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  IdbInternalsHandlerPtr.prototype.downloadBucketData = function() {
    return IdbInternalsHandlerProxy.prototype.downloadBucketData
        .apply(this.ptr.getProxy(), arguments);
  };

  IdbInternalsHandlerProxy.prototype.downloadBucketData = function(bucketId) {
    var params_ = new IdbInternalsHandler_DownloadBucketData_Params();
    params_.bucketId = bucketId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kIdbInternalsHandler_DownloadBucketData_Name,
          codec.align(IdbInternalsHandler_DownloadBucketData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(IdbInternalsHandler_DownloadBucketData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IdbInternalsHandler_DownloadBucketData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  IdbInternalsHandlerPtr.prototype.forceClose = function() {
    return IdbInternalsHandlerProxy.prototype.forceClose
        .apply(this.ptr.getProxy(), arguments);
  };

  IdbInternalsHandlerProxy.prototype.forceClose = function(bucketId) {
    var params_ = new IdbInternalsHandler_ForceClose_Params();
    params_.bucketId = bucketId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kIdbInternalsHandler_ForceClose_Name,
          codec.align(IdbInternalsHandler_ForceClose_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(IdbInternalsHandler_ForceClose_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IdbInternalsHandler_ForceClose_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function IdbInternalsHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  IdbInternalsHandlerStub.prototype.getAllBucketsAcrossAllStorageKeys = function() {
    return this.delegate_ && this.delegate_.getAllBucketsAcrossAllStorageKeys && this.delegate_.getAllBucketsAcrossAllStorageKeys();
  }
  IdbInternalsHandlerStub.prototype.downloadBucketData = function(bucketId) {
    return this.delegate_ && this.delegate_.downloadBucketData && this.delegate_.downloadBucketData(bucketId);
  }
  IdbInternalsHandlerStub.prototype.forceClose = function(bucketId) {
    return this.delegate_ && this.delegate_.forceClose && this.delegate_.forceClose(bucketId);
  }

  IdbInternalsHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  IdbInternalsHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Name:
      var params = reader.decodeStruct(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params);
      this.getAllBucketsAcrossAllStorageKeys().then(function(response) {
        var responseParams =
            new IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams();
        responseParams.error = response.error;
        responseParams.partitions = response.partitions;
        var builder = new codec.MessageV1Builder(
            kIdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Name,
            codec.align(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kIdbInternalsHandler_DownloadBucketData_Name:
      var params = reader.decodeStruct(IdbInternalsHandler_DownloadBucketData_Params);
      this.downloadBucketData(params.bucketId).then(function(response) {
        var responseParams =
            new IdbInternalsHandler_DownloadBucketData_ResponseParams();
        responseParams.error = response.error;
        responseParams.connectionCount = response.connectionCount;
        var builder = new codec.MessageV1Builder(
            kIdbInternalsHandler_DownloadBucketData_Name,
            codec.align(IdbInternalsHandler_DownloadBucketData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(IdbInternalsHandler_DownloadBucketData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kIdbInternalsHandler_ForceClose_Name:
      var params = reader.decodeStruct(IdbInternalsHandler_ForceClose_Params);
      this.forceClose(params.bucketId).then(function(response) {
        var responseParams =
            new IdbInternalsHandler_ForceClose_ResponseParams();
        responseParams.error = response.error;
        responseParams.connectionCount = response.connectionCount;
        var builder = new codec.MessageV1Builder(
            kIdbInternalsHandler_ForceClose_Name,
            codec.align(IdbInternalsHandler_ForceClose_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(IdbInternalsHandler_ForceClose_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateIdbInternalsHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Name:
        if (message.expectsResponse())
          paramsClass = IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Params;
      break;
      case kIdbInternalsHandler_DownloadBucketData_Name:
        if (message.expectsResponse())
          paramsClass = IdbInternalsHandler_DownloadBucketData_Params;
      break;
      case kIdbInternalsHandler_ForceClose_Name:
        if (message.expectsResponse())
          paramsClass = IdbInternalsHandler_ForceClose_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIdbInternalsHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kIdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_Name:
        if (message.isResponse())
          paramsClass = IdbInternalsHandler_GetAllBucketsAcrossAllStorageKeys_ResponseParams;
        break;
      case kIdbInternalsHandler_DownloadBucketData_Name:
        if (message.isResponse())
          paramsClass = IdbInternalsHandler_DownloadBucketData_ResponseParams;
        break;
      case kIdbInternalsHandler_ForceClose_Name:
        if (message.isResponse())
          paramsClass = IdbInternalsHandler_ForceClose_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var IdbInternalsHandler = {
    name: 'storage.mojom.IdbInternalsHandler',
    kVersion: 0,
    ptrClass: IdbInternalsHandlerPtr,
    proxyClass: IdbInternalsHandlerProxy,
    stubClass: IdbInternalsHandlerStub,
    validateRequest: validateIdbInternalsHandlerRequest,
    validateResponse: validateIdbInternalsHandlerResponse,
  };
  IdbInternalsHandlerStub.prototype.validator = validateIdbInternalsHandlerRequest;
  IdbInternalsHandlerProxy.prototype.validator = validateIdbInternalsHandlerResponse;
  exports.IdbPartitionMetadata = IdbPartitionMetadata;
  exports.IdbInternalsHandler = IdbInternalsHandler;
  exports.IdbInternalsHandlerPtr = IdbInternalsHandlerPtr;
  exports.IdbInternalsHandlerAssociatedPtr = IdbInternalsHandlerAssociatedPtr;
})();