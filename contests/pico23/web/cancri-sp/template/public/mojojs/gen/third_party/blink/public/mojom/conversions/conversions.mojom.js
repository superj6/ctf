// third_party/blink/public/mojom/conversions/conversions.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/conversions/conversions.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var registration_type$ =
      mojo.internal.exposeNamespace('attributionReporting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/attribution_reporting/registration_type.mojom', '../../../../../components/attribution_reporting/registration_type.mojom.js');
  }
  var attribution_data_host$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/conversions/attribution_data_host.mojom', 'attribution_data_host.mojom.js');
  }
  var attribution_reporting$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/conversions/attribution_reporting.mojom', 'attribution_reporting.mojom.js');
  }
  var tokens$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/tokens/tokens.mojom', '../tokens/tokens.mojom.js');
  }



  function Impression(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Impression.prototype.initDefaults_ = function() {
    this.attributionSrcToken = null;
    this.navType = 0;
  };
  Impression.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Impression.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Impression.attributionSrcToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, tokens$.AttributionSrcToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Impression.navType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, attribution_reporting$.AttributionNavigationType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Impression.encodedSize = codec.kStructHeaderSize + 16;

  Impression.decode = function(decoder) {
    var packed;
    var val = new Impression();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.attributionSrcToken =
        decoder.decodeStructPointer(tokens$.AttributionSrcToken);
    val.navType =
        decoder.decodeStruct(new codec.Enum(attribution_reporting$.AttributionNavigationType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Impression.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Impression.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(tokens$.AttributionSrcToken, val.attributionSrcToken);
    encoder.encodeStruct(codec.Int32, val.navType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ConversionHost_RegisterDataHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ConversionHost_RegisterDataHost_Params.prototype.initDefaults_ = function() {
    this.dataHost = new bindings.InterfaceRequest();
    this.registrationType = 0;
  };
  ConversionHost_RegisterDataHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ConversionHost_RegisterDataHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConversionHost_RegisterDataHost_Params.dataHost
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConversionHost_RegisterDataHost_Params.registrationType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, registration_type$.RegistrationType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ConversionHost_RegisterDataHost_Params.encodedSize = codec.kStructHeaderSize + 8;

  ConversionHost_RegisterDataHost_Params.decode = function(decoder) {
    var packed;
    var val = new ConversionHost_RegisterDataHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataHost =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.registrationType =
        decoder.decodeStruct(new codec.Enum(registration_type$.RegistrationType));
    return val;
  };

  ConversionHost_RegisterDataHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ConversionHost_RegisterDataHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.dataHost);
    encoder.encodeStruct(codec.Int32, val.registrationType);
  };
  function ConversionHost_RegisterNavigationDataHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ConversionHost_RegisterNavigationDataHost_Params.prototype.initDefaults_ = function() {
    this.dataHost = new bindings.InterfaceRequest();
    this.attributionSrcToken = null;
  };
  ConversionHost_RegisterNavigationDataHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ConversionHost_RegisterNavigationDataHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConversionHost_RegisterNavigationDataHost_Params.dataHost
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConversionHost_RegisterNavigationDataHost_Params.attributionSrcToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, tokens$.AttributionSrcToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ConversionHost_RegisterNavigationDataHost_Params.encodedSize = codec.kStructHeaderSize + 16;

  ConversionHost_RegisterNavigationDataHost_Params.decode = function(decoder) {
    var packed;
    var val = new ConversionHost_RegisterNavigationDataHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataHost =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.attributionSrcToken =
        decoder.decodeStructPointer(tokens$.AttributionSrcToken);
    return val;
  };

  ConversionHost_RegisterNavigationDataHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ConversionHost_RegisterNavigationDataHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.dataHost);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(tokens$.AttributionSrcToken, val.attributionSrcToken);
  };
  var kConversionHost_RegisterDataHost_Name = 0;
  var kConversionHost_RegisterNavigationDataHost_Name = 1;

  function ConversionHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ConversionHost,
                                                   handleOrPtrInfo);
  }

  function ConversionHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ConversionHost, associatedInterfacePtrInfo);
  }

  ConversionHostAssociatedPtr.prototype =
      Object.create(ConversionHostPtr.prototype);
  ConversionHostAssociatedPtr.prototype.constructor =
      ConversionHostAssociatedPtr;

  function ConversionHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ConversionHostPtr.prototype.registerDataHost = function() {
    return ConversionHostProxy.prototype.registerDataHost
        .apply(this.ptr.getProxy(), arguments);
  };

  ConversionHostProxy.prototype.registerDataHost = function(dataHost, registrationType) {
    var params_ = new ConversionHost_RegisterDataHost_Params();
    params_.dataHost = dataHost;
    params_.registrationType = registrationType;
    var builder = new codec.MessageV0Builder(
        kConversionHost_RegisterDataHost_Name,
        codec.align(ConversionHost_RegisterDataHost_Params.encodedSize));
    builder.encodeStruct(ConversionHost_RegisterDataHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ConversionHostPtr.prototype.registerNavigationDataHost = function() {
    return ConversionHostProxy.prototype.registerNavigationDataHost
        .apply(this.ptr.getProxy(), arguments);
  };

  ConversionHostProxy.prototype.registerNavigationDataHost = function(dataHost, attributionSrcToken) {
    var params_ = new ConversionHost_RegisterNavigationDataHost_Params();
    params_.dataHost = dataHost;
    params_.attributionSrcToken = attributionSrcToken;
    var builder = new codec.MessageV0Builder(
        kConversionHost_RegisterNavigationDataHost_Name,
        codec.align(ConversionHost_RegisterNavigationDataHost_Params.encodedSize));
    builder.encodeStruct(ConversionHost_RegisterNavigationDataHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ConversionHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ConversionHostStub.prototype.registerDataHost = function(dataHost, registrationType) {
    return this.delegate_ && this.delegate_.registerDataHost && this.delegate_.registerDataHost(dataHost, registrationType);
  }
  ConversionHostStub.prototype.registerNavigationDataHost = function(dataHost, attributionSrcToken) {
    return this.delegate_ && this.delegate_.registerNavigationDataHost && this.delegate_.registerNavigationDataHost(dataHost, attributionSrcToken);
  }

  ConversionHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kConversionHost_RegisterDataHost_Name:
      var params = reader.decodeStruct(ConversionHost_RegisterDataHost_Params);
      this.registerDataHost(params.dataHost, params.registrationType);
      return true;
    case kConversionHost_RegisterNavigationDataHost_Name:
      var params = reader.decodeStruct(ConversionHost_RegisterNavigationDataHost_Params);
      this.registerNavigationDataHost(params.dataHost, params.attributionSrcToken);
      return true;
    default:
      return false;
    }
  };

  ConversionHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateConversionHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kConversionHost_RegisterDataHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ConversionHost_RegisterDataHost_Params;
      break;
      case kConversionHost_RegisterNavigationDataHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ConversionHost_RegisterNavigationDataHost_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateConversionHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ConversionHost = {
    name: 'blink.mojom.ConversionHost',
    kVersion: 0,
    ptrClass: ConversionHostPtr,
    proxyClass: ConversionHostProxy,
    stubClass: ConversionHostStub,
    validateRequest: validateConversionHostRequest,
    validateResponse: null,
  };
  ConversionHostStub.prototype.validator = validateConversionHostRequest;
  ConversionHostProxy.prototype.validator = null;
  exports.Impression = Impression;
  exports.ConversionHost = ConversionHost;
  exports.ConversionHostPtr = ConversionHostPtr;
  exports.ConversionHostAssociatedPtr = ConversionHostAssociatedPtr;
})();