// components/services/storage/privileged/mojom/indexed_db_bucket_types.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/storage/privileged/mojom/indexed_db_bucket_types.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('storage.mojom');
  var bucket_locator$ =
      mojo.internal.exposeNamespace('storage.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/services/storage/public/mojom/buckets/bucket_locator.mojom', '../../public/mojom/buckets/bucket_locator.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var schemeful_site$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/schemeful_site.mojom', '../../../../../services/network/public/mojom/schemeful_site.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }


  var IdbTransactionMode = {};
  IdbTransactionMode.kReadOnly = 0;
  IdbTransactionMode.kReadWrite = 1;
  IdbTransactionMode.kVersionChange = 2;
  IdbTransactionMode.MIN_VALUE = 0;
  IdbTransactionMode.MAX_VALUE = 2;

  IdbTransactionMode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  IdbTransactionMode.toKnownEnumValue = function(value) {
    return value;
  };

  IdbTransactionMode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var IdbTransactionState = {};
  IdbTransactionState.kBlocked = 0;
  IdbTransactionState.kRunning = 1;
  IdbTransactionState.kStarted = 2;
  IdbTransactionState.kCommitting = 3;
  IdbTransactionState.kFinished = 4;
  IdbTransactionState.MIN_VALUE = 0;
  IdbTransactionState.MAX_VALUE = 4;

  IdbTransactionState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  IdbTransactionState.toKnownEnumValue = function(value) {
    return value;
  };

  IdbTransactionState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function IdbOriginMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbOriginMetadata.prototype.initDefaults_ = function() {
    this.origin = null;
    this.storageKeys = null;
  };
  IdbOriginMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbOriginMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbOriginMetadata.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbOriginMetadata.storageKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(IdbStorageKeyMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbOriginMetadata.encodedSize = codec.kStructHeaderSize + 16;

  IdbOriginMetadata.decode = function(decoder) {
    var packed;
    var val = new IdbOriginMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    val.storageKeys =
        decoder.decodeArrayPointer(new codec.PointerTo(IdbStorageKeyMetadata));
    return val;
  };

  IdbOriginMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbOriginMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeArrayPointer(new codec.PointerTo(IdbStorageKeyMetadata), val.storageKeys);
  };
  function IdbStorageKeyMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbStorageKeyMetadata.prototype.initDefaults_ = function() {
    this.topLevelSite = null;
    this.serializedStorageKey = null;
    this.buckets = null;
  };
  IdbStorageKeyMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbStorageKeyMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbStorageKeyMetadata.topLevelSite
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, schemeful_site$.SchemefulSite, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbStorageKeyMetadata.serializedStorageKey
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbStorageKeyMetadata.buckets
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(IdbBucketMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbStorageKeyMetadata.encodedSize = codec.kStructHeaderSize + 24;

  IdbStorageKeyMetadata.decode = function(decoder) {
    var packed;
    var val = new IdbStorageKeyMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.topLevelSite =
        decoder.decodeStructPointer(schemeful_site$.SchemefulSite);
    val.serializedStorageKey =
        decoder.decodeStruct(codec.String);
    val.buckets =
        decoder.decodeArrayPointer(new codec.PointerTo(IdbBucketMetadata));
    return val;
  };

  IdbStorageKeyMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbStorageKeyMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(schemeful_site$.SchemefulSite, val.topLevelSite);
    encoder.encodeStruct(codec.String, val.serializedStorageKey);
    encoder.encodeArrayPointer(new codec.PointerTo(IdbBucketMetadata), val.buckets);
  };
  function IdbBucketMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbBucketMetadata.prototype.initDefaults_ = function() {
    this.bucketLocator = null;
    this.name = null;
    this.size = 0;
    this.lastModified = null;
    this.paths = null;
    this.connectionCount = 0;
    this.databases = null;
  };
  IdbBucketMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbBucketMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbBucketMetadata.bucketLocator
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bucket_locator$.BucketLocator, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbBucketMetadata.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate IdbBucketMetadata.lastModified
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbBucketMetadata.paths
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(file_path$.FilePath), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    // validate IdbBucketMetadata.databases
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(IdbDatabaseMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbBucketMetadata.encodedSize = codec.kStructHeaderSize + 56;

  IdbBucketMetadata.decode = function(decoder) {
    var packed;
    var val = new IdbBucketMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bucketLocator =
        decoder.decodeStructPointer(bucket_locator$.BucketLocator);
    val.name =
        decoder.decodeStruct(codec.String);
    val.size =
        decoder.decodeStruct(codec.Uint64);
    val.lastModified =
        decoder.decodeStructPointer(time$.Time);
    val.paths =
        decoder.decodeArrayPointer(new codec.PointerTo(file_path$.FilePath));
    val.connectionCount =
        decoder.decodeStruct(codec.Uint64);
    val.databases =
        decoder.decodeArrayPointer(new codec.PointerTo(IdbDatabaseMetadata));
    return val;
  };

  IdbBucketMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbBucketMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bucket_locator$.BucketLocator, val.bucketLocator);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Uint64, val.size);
    encoder.encodeStructPointer(time$.Time, val.lastModified);
    encoder.encodeArrayPointer(new codec.PointerTo(file_path$.FilePath), val.paths);
    encoder.encodeStruct(codec.Uint64, val.connectionCount);
    encoder.encodeArrayPointer(new codec.PointerTo(IdbDatabaseMetadata), val.databases);
  };
  function IdbDatabaseMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbDatabaseMetadata.prototype.initDefaults_ = function() {
    this.name = null;
    this.connectionCount = 0;
    this.activeOpenDelete = 0;
    this.pendingOpenDelete = 0;
    this.transactions = null;
  };
  IdbDatabaseMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbDatabaseMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbDatabaseMetadata.name
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;





    // validate IdbDatabaseMetadata.transactions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(IdbTransactionMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbDatabaseMetadata.encodedSize = codec.kStructHeaderSize + 40;

  IdbDatabaseMetadata.decode = function(decoder) {
    var packed;
    var val = new IdbDatabaseMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStructPointer(string16$.String16);
    val.connectionCount =
        decoder.decodeStruct(codec.Uint64);
    val.activeOpenDelete =
        decoder.decodeStruct(codec.Uint64);
    val.pendingOpenDelete =
        decoder.decodeStruct(codec.Uint64);
    val.transactions =
        decoder.decodeArrayPointer(new codec.PointerTo(IdbTransactionMetadata));
    return val;
  };

  IdbDatabaseMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbDatabaseMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.name);
    encoder.encodeStruct(codec.Uint64, val.connectionCount);
    encoder.encodeStruct(codec.Uint64, val.activeOpenDelete);
    encoder.encodeStruct(codec.Uint64, val.pendingOpenDelete);
    encoder.encodeArrayPointer(new codec.PointerTo(IdbTransactionMetadata), val.transactions);
  };
  function IdbTransactionMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdbTransactionMetadata.prototype.initDefaults_ = function() {
    this.mode = 0;
    this.status = 0;
    this.tid = 0;
    this.age = 0;
    this.runtime = 0;
    this.tasksScheduled = 0;
    this.tasksCompleted = 0;
    this.scope = null;
  };
  IdbTransactionMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdbTransactionMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbTransactionMetadata.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, IdbTransactionMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdbTransactionMetadata.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, IdbTransactionState);
    if (err !== validator.validationError.NONE)
        return err;







    // validate IdbTransactionMetadata.scope
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(string16$.String16), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdbTransactionMetadata.encodedSize = codec.kStructHeaderSize + 56;

  IdbTransactionMetadata.decode = function(decoder) {
    var packed;
    var val = new IdbTransactionMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mode =
        decoder.decodeStruct(new codec.Enum(IdbTransactionMode));
    val.status =
        decoder.decodeStruct(new codec.Enum(IdbTransactionState));
    val.tid =
        decoder.decodeStruct(codec.Int64);
    val.age =
        decoder.decodeStruct(codec.Double);
    val.runtime =
        decoder.decodeStruct(codec.Double);
    val.tasksScheduled =
        decoder.decodeStruct(codec.Double);
    val.tasksCompleted =
        decoder.decodeStruct(codec.Double);
    val.scope =
        decoder.decodeArrayPointer(new codec.PointerTo(string16$.String16));
    return val;
  };

  IdbTransactionMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdbTransactionMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.encodeStruct(codec.Int64, val.tid);
    encoder.encodeStruct(codec.Double, val.age);
    encoder.encodeStruct(codec.Double, val.runtime);
    encoder.encodeStruct(codec.Double, val.tasksScheduled);
    encoder.encodeStruct(codec.Double, val.tasksCompleted);
    encoder.encodeArrayPointer(new codec.PointerTo(string16$.String16), val.scope);
  };
  exports.IdbTransactionMode = IdbTransactionMode;
  exports.IdbTransactionState = IdbTransactionState;
  exports.IdbOriginMetadata = IdbOriginMetadata;
  exports.IdbStorageKeyMetadata = IdbStorageKeyMetadata;
  exports.IdbBucketMetadata = IdbBucketMetadata;
  exports.IdbDatabaseMetadata = IdbDatabaseMetadata;
  exports.IdbTransactionMetadata = IdbTransactionMetadata;
})();