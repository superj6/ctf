// third_party/blink/public/mojom/smart_card/smart_card.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/smart_card/smart_card.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var smart_card$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/device/public/mojom/smart_card.mojom', '../../../../../services/device/public/mojom/smart_card.mojom.js');
  }


  var SmartCardResponseCode = {};
  SmartCardResponseCode.kNoService = 0;
  SmartCardResponseCode.kNoSmartCard = 1;
  SmartCardResponseCode.kNotReady = 2;
  SmartCardResponseCode.kNotTransacted = 3;
  SmartCardResponseCode.kProtoMismatch = 4;
  SmartCardResponseCode.kReaderUnavailable = 5;
  SmartCardResponseCode.kRemovedCard = 6;
  SmartCardResponseCode.kResetCard = 7;
  SmartCardResponseCode.kSharingViolation = 8;
  SmartCardResponseCode.kSystemCancelled = 9;
  SmartCardResponseCode.kUnpoweredCard = 10;
  SmartCardResponseCode.kUnresponsiveCard = 11;
  SmartCardResponseCode.kUnsupportedCard = 12;
  SmartCardResponseCode.kUnsupportedFeature = 13;
  SmartCardResponseCode.MIN_VALUE = 0;
  SmartCardResponseCode.MAX_VALUE = 13;

  SmartCardResponseCode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    }
    return false;
  };

  SmartCardResponseCode.toKnownEnumValue = function(value) {
    return value;
  };

  SmartCardResponseCode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SmartCardService_RegisterClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmartCardService_RegisterClient_Params.prototype.initDefaults_ = function() {
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  SmartCardService_RegisterClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmartCardService_RegisterClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmartCardService_RegisterClient_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SmartCardService_RegisterClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  SmartCardService_RegisterClient_Params.decode = function(decoder) {
    var packed;
    var val = new SmartCardService_RegisterClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  SmartCardService_RegisterClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmartCardService_RegisterClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
  };
  function SmartCardService_RegisterClient_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmartCardService_RegisterClient_ResponseParams.prototype.initDefaults_ = function() {
    this.canNotifyAddedRemoved = false;
  };
  SmartCardService_RegisterClient_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmartCardService_RegisterClient_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SmartCardService_RegisterClient_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SmartCardService_RegisterClient_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SmartCardService_RegisterClient_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.canNotifyAddedRemoved = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SmartCardService_RegisterClient_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmartCardService_RegisterClient_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.canNotifyAddedRemoved & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SmartCardService_GetReaders_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmartCardService_GetReaders_Params.prototype.initDefaults_ = function() {
  };
  SmartCardService_GetReaders_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmartCardService_GetReaders_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SmartCardService_GetReaders_Params.encodedSize = codec.kStructHeaderSize + 0;

  SmartCardService_GetReaders_Params.decode = function(decoder) {
    var packed;
    var val = new SmartCardService_GetReaders_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SmartCardService_GetReaders_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmartCardService_GetReaders_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SmartCardService_GetReaders_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SmartCardService_GetReaders_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  SmartCardService_GetReaders_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SmartCardService_GetReaders_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SmartCardService_GetReaders_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, SmartCardGetReadersResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SmartCardService_GetReaders_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SmartCardService_GetReaders_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SmartCardService_GetReaders_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(SmartCardGetReadersResult);
    return val;
  };

  SmartCardService_GetReaders_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SmartCardService_GetReaders_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(SmartCardGetReadersResult, val.result);
  };

  function SmartCardGetReadersResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  SmartCardGetReadersResult.Tags = {
    responseCode: 0,
    readers: 1,
  };

  SmartCardGetReadersResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  SmartCardGetReadersResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "responseCode",
        "readers",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a SmartCardGetReadersResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(SmartCardGetReadersResult.prototype, "responseCode", {
    get: function() {
      if (this.$tag != SmartCardGetReadersResult.Tags.responseCode) {
        throw new ReferenceError(
            "SmartCardGetReadersResult.responseCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = SmartCardGetReadersResult.Tags.responseCode;
      this.$data = value;
    }
  });
  Object.defineProperty(SmartCardGetReadersResult.prototype, "readers", {
    get: function() {
      if (this.$tag != SmartCardGetReadersResult.Tags.readers) {
        throw new ReferenceError(
            "SmartCardGetReadersResult.readers is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = SmartCardGetReadersResult.Tags.readers;
      this.$data = value;
    }
  });


    SmartCardGetReadersResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case SmartCardGetReadersResult.Tags.responseCode:
          encoder.encodeStruct(codec.Int32, val.responseCode);
          break;
        case SmartCardGetReadersResult.Tags.readers:
          encoder.encodeArrayPointer(new codec.PointerTo(smart_card$.SmartCardReaderInfo), val.readers);
          break;
      }
      encoder.align();
    };


    SmartCardGetReadersResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new SmartCardGetReadersResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case SmartCardGetReadersResult.Tags.responseCode:
          result.responseCode = decoder.decodeStruct(new codec.Enum(SmartCardResponseCode));
          break;
        case SmartCardGetReadersResult.Tags.readers:
          result.readers = decoder.decodeArrayPointer(new codec.PointerTo(smart_card$.SmartCardReaderInfo));
          break;
      }
      decoder.align();

      return result;
    };


    SmartCardGetReadersResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case SmartCardGetReadersResult.Tags.responseCode:
          

    // validate SmartCardGetReadersResult.responseCode
    err = messageValidator.validateEnum(data_offset, SmartCardResponseCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case SmartCardGetReadersResult.Tags.readers:
          

    // validate SmartCardGetReadersResult.readers
    err = messageValidator.validateArrayPointer(data_offset, 8, new codec.PointerTo(smart_card$.SmartCardReaderInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  SmartCardGetReadersResult.encodedSize = 16;
  var kSmartCardService_RegisterClient_Name = 0;
  var kSmartCardService_GetReaders_Name = 1;

  function SmartCardServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SmartCardService,
                                                   handleOrPtrInfo);
  }

  function SmartCardServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SmartCardService, associatedInterfacePtrInfo);
  }

  SmartCardServiceAssociatedPtr.prototype =
      Object.create(SmartCardServicePtr.prototype);
  SmartCardServiceAssociatedPtr.prototype.constructor =
      SmartCardServiceAssociatedPtr;

  function SmartCardServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  SmartCardServicePtr.prototype.registerClient = function() {
    return SmartCardServiceProxy.prototype.registerClient
        .apply(this.ptr.getProxy(), arguments);
  };

  SmartCardServiceProxy.prototype.registerClient = function(client) {
    var params_ = new SmartCardService_RegisterClient_Params();
    params_.client = client;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kSmartCardService_RegisterClient_Name,
          codec.align(SmartCardService_RegisterClient_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(SmartCardService_RegisterClient_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SmartCardService_RegisterClient_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SmartCardServicePtr.prototype.getReaders = function() {
    return SmartCardServiceProxy.prototype.getReaders
        .apply(this.ptr.getProxy(), arguments);
  };

  SmartCardServiceProxy.prototype.getReaders = function() {
    var params_ = new SmartCardService_GetReaders_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSmartCardService_GetReaders_Name,
          codec.align(SmartCardService_GetReaders_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SmartCardService_GetReaders_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SmartCardService_GetReaders_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SmartCardServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  SmartCardServiceStub.prototype.registerClient = function(client) {
    return this.delegate_ && this.delegate_.registerClient && this.delegate_.registerClient(client);
  }
  SmartCardServiceStub.prototype.getReaders = function() {
    return this.delegate_ && this.delegate_.getReaders && this.delegate_.getReaders();
  }

  SmartCardServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SmartCardServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSmartCardService_RegisterClient_Name:
      var params = reader.decodeStruct(SmartCardService_RegisterClient_Params);
      this.registerClient(params.client).then(function(response) {
        var responseParams =
            new SmartCardService_RegisterClient_ResponseParams();
        responseParams.canNotifyAddedRemoved = response.canNotifyAddedRemoved;
        var builder = new codec.MessageV2Builder(
            kSmartCardService_RegisterClient_Name,
            codec.align(SmartCardService_RegisterClient_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(SmartCardService_RegisterClient_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSmartCardService_GetReaders_Name:
      var params = reader.decodeStruct(SmartCardService_GetReaders_Params);
      this.getReaders().then(function(response) {
        var responseParams =
            new SmartCardService_GetReaders_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kSmartCardService_GetReaders_Name,
            codec.align(SmartCardService_GetReaders_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SmartCardService_GetReaders_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSmartCardServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSmartCardService_RegisterClient_Name:
        if (message.expectsResponse())
          paramsClass = SmartCardService_RegisterClient_Params;
      break;
      case kSmartCardService_GetReaders_Name:
        if (message.expectsResponse())
          paramsClass = SmartCardService_GetReaders_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSmartCardServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSmartCardService_RegisterClient_Name:
        if (message.isResponse())
          paramsClass = SmartCardService_RegisterClient_ResponseParams;
        break;
      case kSmartCardService_GetReaders_Name:
        if (message.isResponse())
          paramsClass = SmartCardService_GetReaders_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SmartCardService = {
    name: 'blink.mojom.SmartCardService',
    kVersion: 0,
    ptrClass: SmartCardServicePtr,
    proxyClass: SmartCardServiceProxy,
    stubClass: SmartCardServiceStub,
    validateRequest: validateSmartCardServiceRequest,
    validateResponse: validateSmartCardServiceResponse,
  };
  SmartCardServiceStub.prototype.validator = validateSmartCardServiceRequest;
  SmartCardServiceProxy.prototype.validator = validateSmartCardServiceResponse;
  exports.SmartCardResponseCode = SmartCardResponseCode;
  exports.SmartCardGetReadersResult = SmartCardGetReadersResult;
  exports.SmartCardService = SmartCardService;
  exports.SmartCardServicePtr = SmartCardServicePtr;
  exports.SmartCardServiceAssociatedPtr = SmartCardServiceAssociatedPtr;
})();