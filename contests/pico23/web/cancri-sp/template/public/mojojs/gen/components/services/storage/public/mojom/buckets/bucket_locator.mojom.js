// components/services/storage/public/mojom/buckets/bucket_locator.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/storage/public/mojom/buckets/bucket_locator.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('storage.mojom');
  var bucket_id$ =
      mojo.internal.exposeNamespace('storage.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/services/storage/public/mojom/buckets/bucket_id.mojom', 'bucket_id.mojom.js');
  }
  var quota_types$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/quota/quota_types.mojom', '../../../../../../third_party/blink/public/mojom/quota/quota_types.mojom.js');
  }
  var storage_key$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/storage_key/storage_key.mojom', '../../../../../../third_party/blink/public/mojom/storage_key/storage_key.mojom.js');
  }



  function BucketLocator(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BucketLocator.prototype.initDefaults_ = function() {
    this.id = null;
    this.storageKey = null;
    this.type = 0;
    this.isDefault = false;
  };
  BucketLocator.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BucketLocator.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BucketLocator.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bucket_id$.BucketId, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BucketLocator.storageKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, storage_key$.StorageKey, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BucketLocator.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, quota_types$.StorageType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  BucketLocator.encodedSize = codec.kStructHeaderSize + 24;

  BucketLocator.decode = function(decoder) {
    var packed;
    var val = new BucketLocator();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(bucket_id$.BucketId);
    val.storageKey =
        decoder.decodeStructPointer(storage_key$.StorageKey);
    val.type =
        decoder.decodeStruct(new codec.Enum(quota_types$.StorageType));
    packed = decoder.readUint8();
    val.isDefault = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  BucketLocator.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BucketLocator.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bucket_id$.BucketId, val.id);
    encoder.encodeStructPointer(storage_key$.StorageKey, val.storageKey);
    encoder.encodeStruct(codec.Int32, val.type);
    packed = 0;
    packed |= (val.isDefault & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  exports.BucketLocator = BucketLocator;
})();