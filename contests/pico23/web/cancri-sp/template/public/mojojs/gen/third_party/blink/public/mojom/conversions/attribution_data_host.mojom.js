// third_party/blink/public/mojom/conversions/attribution_data_host.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/conversions/attribution_data_host.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var registration$ =
      mojo.internal.exposeNamespace('attributionReporting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/attribution_reporting/registration.mojom', '../../../../../components/attribution_reporting/registration.mojom.js');
  }
  var attribution$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/attribution.mojom', '../../../../../services/network/public/mojom/attribution.mojom.js');
  }



  function AttributionDataHost_SourceDataAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionDataHost_SourceDataAvailable_Params.prototype.initDefaults_ = function() {
    this.reportingOrigin = null;
    this.data = null;
  };
  AttributionDataHost_SourceDataAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionDataHost_SourceDataAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_SourceDataAvailable_Params.reportingOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, registration$.SuitableOrigin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_SourceDataAvailable_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, registration$.SourceRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionDataHost_SourceDataAvailable_Params.encodedSize = codec.kStructHeaderSize + 16;

  AttributionDataHost_SourceDataAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new AttributionDataHost_SourceDataAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reportingOrigin =
        decoder.decodeStructPointer(registration$.SuitableOrigin);
    val.data =
        decoder.decodeStructPointer(registration$.SourceRegistration);
    return val;
  };

  AttributionDataHost_SourceDataAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionDataHost_SourceDataAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(registration$.SuitableOrigin, val.reportingOrigin);
    encoder.encodeStructPointer(registration$.SourceRegistration, val.data);
  };
  function AttributionDataHost_TriggerDataAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionDataHost_TriggerDataAvailable_Params.prototype.initDefaults_ = function() {
    this.reportingOrigin = null;
    this.data = null;
    this.attestation = null;
  };
  AttributionDataHost_TriggerDataAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionDataHost_TriggerDataAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_TriggerDataAvailable_Params.reportingOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, registration$.SuitableOrigin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_TriggerDataAvailable_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, registration$.TriggerRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_TriggerDataAvailable_Params.attestation
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, attribution$.TriggerAttestation, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionDataHost_TriggerDataAvailable_Params.encodedSize = codec.kStructHeaderSize + 24;

  AttributionDataHost_TriggerDataAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new AttributionDataHost_TriggerDataAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reportingOrigin =
        decoder.decodeStructPointer(registration$.SuitableOrigin);
    val.data =
        decoder.decodeStructPointer(registration$.TriggerRegistration);
    val.attestation =
        decoder.decodeStructPointer(attribution$.TriggerAttestation);
    return val;
  };

  AttributionDataHost_TriggerDataAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionDataHost_TriggerDataAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(registration$.SuitableOrigin, val.reportingOrigin);
    encoder.encodeStructPointer(registration$.TriggerRegistration, val.data);
    encoder.encodeStructPointer(attribution$.TriggerAttestation, val.attestation);
  };
  var kAttributionDataHost_SourceDataAvailable_Name = 0;
  var kAttributionDataHost_TriggerDataAvailable_Name = 1;

  function AttributionDataHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AttributionDataHost,
                                                   handleOrPtrInfo);
  }

  function AttributionDataHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AttributionDataHost, associatedInterfacePtrInfo);
  }

  AttributionDataHostAssociatedPtr.prototype =
      Object.create(AttributionDataHostPtr.prototype);
  AttributionDataHostAssociatedPtr.prototype.constructor =
      AttributionDataHostAssociatedPtr;

  function AttributionDataHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  AttributionDataHostPtr.prototype.sourceDataAvailable = function() {
    return AttributionDataHostProxy.prototype.sourceDataAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  AttributionDataHostProxy.prototype.sourceDataAvailable = function(reportingOrigin, data) {
    var params_ = new AttributionDataHost_SourceDataAvailable_Params();
    params_.reportingOrigin = reportingOrigin;
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kAttributionDataHost_SourceDataAvailable_Name,
        codec.align(AttributionDataHost_SourceDataAvailable_Params.encodedSize));
    builder.encodeStruct(AttributionDataHost_SourceDataAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AttributionDataHostPtr.prototype.triggerDataAvailable = function() {
    return AttributionDataHostProxy.prototype.triggerDataAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  AttributionDataHostProxy.prototype.triggerDataAvailable = function(reportingOrigin, data, attestation) {
    var params_ = new AttributionDataHost_TriggerDataAvailable_Params();
    params_.reportingOrigin = reportingOrigin;
    params_.data = data;
    params_.attestation = attestation;
    var builder = new codec.MessageV0Builder(
        kAttributionDataHost_TriggerDataAvailable_Name,
        codec.align(AttributionDataHost_TriggerDataAvailable_Params.encodedSize));
    builder.encodeStruct(AttributionDataHost_TriggerDataAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AttributionDataHostStub(delegate) {
    this.delegate_ = delegate;
  }
  AttributionDataHostStub.prototype.sourceDataAvailable = function(reportingOrigin, data) {
    return this.delegate_ && this.delegate_.sourceDataAvailable && this.delegate_.sourceDataAvailable(reportingOrigin, data);
  }
  AttributionDataHostStub.prototype.triggerDataAvailable = function(reportingOrigin, data, attestation) {
    return this.delegate_ && this.delegate_.triggerDataAvailable && this.delegate_.triggerDataAvailable(reportingOrigin, data, attestation);
  }

  AttributionDataHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAttributionDataHost_SourceDataAvailable_Name:
      var params = reader.decodeStruct(AttributionDataHost_SourceDataAvailable_Params);
      this.sourceDataAvailable(params.reportingOrigin, params.data);
      return true;
    case kAttributionDataHost_TriggerDataAvailable_Name:
      var params = reader.decodeStruct(AttributionDataHost_TriggerDataAvailable_Params);
      this.triggerDataAvailable(params.reportingOrigin, params.data, params.attestation);
      return true;
    default:
      return false;
    }
  };

  AttributionDataHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAttributionDataHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAttributionDataHost_SourceDataAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AttributionDataHost_SourceDataAvailable_Params;
      break;
      case kAttributionDataHost_TriggerDataAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AttributionDataHost_TriggerDataAvailable_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAttributionDataHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AttributionDataHost = {
    name: 'blink.mojom.AttributionDataHost',
    kVersion: 0,
    ptrClass: AttributionDataHostPtr,
    proxyClass: AttributionDataHostProxy,
    stubClass: AttributionDataHostStub,
    validateRequest: validateAttributionDataHostRequest,
    validateResponse: null,
  };
  AttributionDataHostStub.prototype.validator = validateAttributionDataHostRequest;
  AttributionDataHostProxy.prototype.validator = null;
  exports.AttributionDataHost = AttributionDataHost;
  exports.AttributionDataHostPtr = AttributionDataHostPtr;
  exports.AttributionDataHostAssociatedPtr = AttributionDataHostAssociatedPtr;
})();