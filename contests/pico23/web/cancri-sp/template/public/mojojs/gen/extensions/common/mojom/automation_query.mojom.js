// extensions/common/mojom/automation_query.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'extensions/common/mojom/automation_query.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('extensions.mojom');


  var AutomationQueryError = {};
  AutomationQueryError.kNone = 0;
  AutomationQueryError.kNoDocument = 1;
  AutomationQueryError.kNodeDestroyed = 2;
  AutomationQueryError.MIN_VALUE = 0;
  AutomationQueryError.MAX_VALUE = 2;

  AutomationQueryError.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  AutomationQueryError.toKnownEnumValue = function(value) {
    return value;
  };

  AutomationQueryError.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AutomationQuery_QuerySelector_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutomationQuery_QuerySelector_Params.prototype.initDefaults_ = function() {
    this.accObjId = 0;
    this.selector = null;
  };
  AutomationQuery_QuerySelector_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutomationQuery_QuerySelector_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AutomationQuery_QuerySelector_Params.selector
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutomationQuery_QuerySelector_Params.encodedSize = codec.kStructHeaderSize + 16;

  AutomationQuery_QuerySelector_Params.decode = function(decoder) {
    var packed;
    var val = new AutomationQuery_QuerySelector_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.accObjId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.selector =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AutomationQuery_QuerySelector_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutomationQuery_QuerySelector_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.accObjId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.selector);
  };
  function AutomationQuery_QuerySelector_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AutomationQuery_QuerySelector_ResponseParams.prototype.initDefaults_ = function() {
    this.resultAccObjId = 0;
    this.error = 0;
  };
  AutomationQuery_QuerySelector_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AutomationQuery_QuerySelector_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AutomationQuery_QuerySelector_ResponseParams.error
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, AutomationQueryError);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AutomationQuery_QuerySelector_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  AutomationQuery_QuerySelector_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AutomationQuery_QuerySelector_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultAccObjId =
        decoder.decodeStruct(codec.Int32);
    val.error =
        decoder.decodeStruct(new codec.Enum(AutomationQueryError));
    return val;
  };

  AutomationQuery_QuerySelector_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AutomationQuery_QuerySelector_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.resultAccObjId);
    encoder.encodeStruct(codec.Int32, val.error);
  };
  var kAutomationQuery_QuerySelector_Name = 1740010097;

  function AutomationQueryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AutomationQuery,
                                                   handleOrPtrInfo);
  }

  function AutomationQueryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AutomationQuery, associatedInterfacePtrInfo);
  }

  AutomationQueryAssociatedPtr.prototype =
      Object.create(AutomationQueryPtr.prototype);
  AutomationQueryAssociatedPtr.prototype.constructor =
      AutomationQueryAssociatedPtr;

  function AutomationQueryProxy(receiver) {
    this.receiver_ = receiver;
  }
  AutomationQueryPtr.prototype.querySelector = function() {
    return AutomationQueryProxy.prototype.querySelector
        .apply(this.ptr.getProxy(), arguments);
  };

  AutomationQueryProxy.prototype.querySelector = function(accObjId, selector) {
    var params_ = new AutomationQuery_QuerySelector_Params();
    params_.accObjId = accObjId;
    params_.selector = selector;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAutomationQuery_QuerySelector_Name,
          codec.align(AutomationQuery_QuerySelector_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AutomationQuery_QuerySelector_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AutomationQuery_QuerySelector_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function AutomationQueryStub(delegate) {
    this.delegate_ = delegate;
  }
  AutomationQueryStub.prototype.querySelector = function(accObjId, selector) {
    return this.delegate_ && this.delegate_.querySelector && this.delegate_.querySelector(accObjId, selector);
  }

  AutomationQueryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  AutomationQueryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAutomationQuery_QuerySelector_Name:
      var params = reader.decodeStruct(AutomationQuery_QuerySelector_Params);
      this.querySelector(params.accObjId, params.selector).then(function(response) {
        var responseParams =
            new AutomationQuery_QuerySelector_ResponseParams();
        responseParams.resultAccObjId = response.resultAccObjId;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kAutomationQuery_QuerySelector_Name,
            codec.align(AutomationQuery_QuerySelector_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AutomationQuery_QuerySelector_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateAutomationQueryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAutomationQuery_QuerySelector_Name:
        if (message.expectsResponse())
          paramsClass = AutomationQuery_QuerySelector_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAutomationQueryResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAutomationQuery_QuerySelector_Name:
        if (message.isResponse())
          paramsClass = AutomationQuery_QuerySelector_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var AutomationQuery = {
    name: 'extensions.mojom.AutomationQuery',
    kVersion: 0,
    ptrClass: AutomationQueryPtr,
    proxyClass: AutomationQueryProxy,
    stubClass: AutomationQueryStub,
    validateRequest: validateAutomationQueryRequest,
    validateResponse: validateAutomationQueryResponse,
  };
  AutomationQueryStub.prototype.validator = validateAutomationQueryRequest;
  AutomationQueryProxy.prototype.validator = validateAutomationQueryResponse;
  exports.AutomationQueryError = AutomationQueryError;
  exports.AutomationQuery = AutomationQuery;
  exports.AutomationQueryPtr = AutomationQueryPtr;
  exports.AutomationQueryAssociatedPtr = AutomationQueryAssociatedPtr;
})();