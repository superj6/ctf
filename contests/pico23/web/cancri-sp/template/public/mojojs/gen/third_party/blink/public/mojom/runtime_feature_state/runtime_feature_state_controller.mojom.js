// third_party/blink/public/mojom/runtime_feature_state/runtime_feature_state_controller.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/runtime_feature_state/runtime_feature_state_controller.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var runtime_feature_state$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/runtime_feature_state/runtime_feature_state.mojom', 'runtime_feature_state.mojom.js');
  }



  function FeatureValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FeatureValue.prototype.initDefaults_ = function() {
    this.isEnabled = false;
    this.tokens = null;
  };
  FeatureValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FeatureValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate FeatureValue.tokens
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FeatureValue.encodedSize = codec.kStructHeaderSize + 16;

  FeatureValue.decode = function(decoder) {
    var packed;
    var val = new FeatureValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isEnabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.tokens =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  FeatureValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FeatureValue.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isEnabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.String, val.tokens);
  };
  function RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.prototype.initDefaults_ = function() {
    this.modifiedFeatures = null;
  };
  RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.modifiedFeatures
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, new codec.Enum(runtime_feature_state$.RuntimeFeatureState), new codec.PointerTo(FeatureValue), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.encodedSize = codec.kStructHeaderSize + 8;

  RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.decode = function(decoder) {
    var packed;
    var val = new RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.modifiedFeatures =
        decoder.decodeMapPointer(new codec.Enum(runtime_feature_state$.RuntimeFeatureState), new codec.PointerTo(FeatureValue));
    return val;
  };

  RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(new codec.Enum(runtime_feature_state$.RuntimeFeatureState), new codec.PointerTo(FeatureValue), val.modifiedFeatures);
  };
  var kRuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Name = 0;

  function RuntimeFeatureStateControllerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RuntimeFeatureStateController,
                                                   handleOrPtrInfo);
  }

  function RuntimeFeatureStateControllerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RuntimeFeatureStateController, associatedInterfacePtrInfo);
  }

  RuntimeFeatureStateControllerAssociatedPtr.prototype =
      Object.create(RuntimeFeatureStateControllerPtr.prototype);
  RuntimeFeatureStateControllerAssociatedPtr.prototype.constructor =
      RuntimeFeatureStateControllerAssociatedPtr;

  function RuntimeFeatureStateControllerProxy(receiver) {
    this.receiver_ = receiver;
  }
  RuntimeFeatureStateControllerPtr.prototype.applyFeatureDiffForOriginTrial = function() {
    return RuntimeFeatureStateControllerProxy.prototype.applyFeatureDiffForOriginTrial
        .apply(this.ptr.getProxy(), arguments);
  };

  RuntimeFeatureStateControllerProxy.prototype.applyFeatureDiffForOriginTrial = function(modifiedFeatures) {
    var params_ = new RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params();
    params_.modifiedFeatures = modifiedFeatures;
    var builder = new codec.MessageV0Builder(
        kRuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Name,
        codec.align(RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params.encodedSize));
    builder.encodeStruct(RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function RuntimeFeatureStateControllerStub(delegate) {
    this.delegate_ = delegate;
  }
  RuntimeFeatureStateControllerStub.prototype.applyFeatureDiffForOriginTrial = function(modifiedFeatures) {
    return this.delegate_ && this.delegate_.applyFeatureDiffForOriginTrial && this.delegate_.applyFeatureDiffForOriginTrial(modifiedFeatures);
  }

  RuntimeFeatureStateControllerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Name:
      var params = reader.decodeStruct(RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params);
      this.applyFeatureDiffForOriginTrial(params.modifiedFeatures);
      return true;
    default:
      return false;
    }
  };

  RuntimeFeatureStateControllerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateRuntimeFeatureStateControllerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = RuntimeFeatureStateController_ApplyFeatureDiffForOriginTrial_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRuntimeFeatureStateControllerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var RuntimeFeatureStateController = {
    name: 'blink.mojom.RuntimeFeatureStateController',
    kVersion: 0,
    ptrClass: RuntimeFeatureStateControllerPtr,
    proxyClass: RuntimeFeatureStateControllerProxy,
    stubClass: RuntimeFeatureStateControllerStub,
    validateRequest: validateRuntimeFeatureStateControllerRequest,
    validateResponse: null,
  };
  RuntimeFeatureStateControllerStub.prototype.validator = validateRuntimeFeatureStateControllerRequest;
  RuntimeFeatureStateControllerProxy.prototype.validator = null;
  exports.FeatureValue = FeatureValue;
  exports.RuntimeFeatureStateController = RuntimeFeatureStateController;
  exports.RuntimeFeatureStateControllerPtr = RuntimeFeatureStateControllerPtr;
  exports.RuntimeFeatureStateControllerAssociatedPtr = RuntimeFeatureStateControllerAssociatedPtr;
})();