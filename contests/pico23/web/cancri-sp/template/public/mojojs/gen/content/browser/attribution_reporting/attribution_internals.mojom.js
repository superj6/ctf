// content/browser/attribution_reporting/attribution_internals.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/browser/attribution_reporting/attribution_internals.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('attributionInternals.mojom');
  var registration$ =
      mojo.internal.exposeNamespace('attributionReporting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/attribution_reporting/registration.mojom', '../../../components/attribution_reporting/registration.mojom.js');
  }
  var source_registration_error$ =
      mojo.internal.exposeNamespace('attributionReporting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/attribution_reporting/source_registration_error.mojom', '../../../components/attribution_reporting/source_registration_error.mojom.js');
  }
  var source_type$ =
      mojo.internal.exposeNamespace('attributionReporting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/attribution_reporting/source_type.mojom', '../../../components/attribution_reporting/source_type.mojom.js');
  }
  var attribution_reporting$ =
      mojo.internal.exposeNamespace('attributionReporting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/browser/attribution_reporting/attribution_reporting.mojom', 'attribution_reporting.mojom.js');
  }
  var attribution$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/attribution.mojom', '../../../services/network/public/mojom/attribution.mojom.js');
  }
  var schemeful_site$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/schemeful_site.mojom', '../../../services/network/public/mojom/schemeful_site.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }



  function EventLevelReportID(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EventLevelReportID.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  EventLevelReportID.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EventLevelReportID.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  EventLevelReportID.encodedSize = codec.kStructHeaderSize + 8;

  EventLevelReportID.decode = function(decoder) {
    var packed;
    var val = new EventLevelReportID();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  EventLevelReportID.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EventLevelReportID.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.value);
  };
  function AggregatableAttributionReportID(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AggregatableAttributionReportID.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  AggregatableAttributionReportID.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AggregatableAttributionReportID.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AggregatableAttributionReportID.encodedSize = codec.kStructHeaderSize + 8;

  AggregatableAttributionReportID.decode = function(decoder) {
    var packed;
    var val = new AggregatableAttributionReportID();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  AggregatableAttributionReportID.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AggregatableAttributionReportID.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.value);
  };
  function WebUIReportEventLevelData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIReportEventLevelData.prototype.initDefaults_ = function() {
    this.priority = 0;
    this.attributedTruthfully = false;
  };
  WebUIReportEventLevelData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIReportEventLevelData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  WebUIReportEventLevelData.encodedSize = codec.kStructHeaderSize + 16;

  WebUIReportEventLevelData.decode = function(decoder) {
    var packed;
    var val = new WebUIReportEventLevelData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.priority =
        decoder.decodeStruct(codec.Int64);
    packed = decoder.readUint8();
    val.attributedTruthfully = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebUIReportEventLevelData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIReportEventLevelData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.priority);
    packed = 0;
    packed |= (val.attributedTruthfully & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AggregatableHistogramContribution(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AggregatableHistogramContribution.prototype.initDefaults_ = function() {
    this.key = null;
    this.value = 0;
  };
  AggregatableHistogramContribution.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AggregatableHistogramContribution.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AggregatableHistogramContribution.key
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AggregatableHistogramContribution.encodedSize = codec.kStructHeaderSize + 16;

  AggregatableHistogramContribution.decode = function(decoder) {
    var packed;
    var val = new AggregatableHistogramContribution();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.key =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AggregatableHistogramContribution.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AggregatableHistogramContribution.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.key);
    encoder.encodeStruct(codec.Uint32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AttestationToken(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttestationToken.prototype.initDefaults_ = function() {
    this.value = null;
  };
  AttestationToken.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttestationToken.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttestationToken.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttestationToken.encodedSize = codec.kStructHeaderSize + 8;

  AttestationToken.decode = function(decoder) {
    var packed;
    var val = new AttestationToken();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AttestationToken.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttestationToken.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function WebUIReportAggregatableAttributionData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIReportAggregatableAttributionData.prototype.initDefaults_ = function() {
    this.contributions = null;
    this.attestationToken = null;
    this.aggregationCoordinator = null;
  };
  WebUIReportAggregatableAttributionData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIReportAggregatableAttributionData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReportAggregatableAttributionData.contributions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(AggregatableHistogramContribution), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReportAggregatableAttributionData.attestationToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, AttestationToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReportAggregatableAttributionData.aggregationCoordinator
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIReportAggregatableAttributionData.encodedSize = codec.kStructHeaderSize + 24;

  WebUIReportAggregatableAttributionData.decode = function(decoder) {
    var packed;
    var val = new WebUIReportAggregatableAttributionData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contributions =
        decoder.decodeArrayPointer(new codec.PointerTo(AggregatableHistogramContribution));
    val.attestationToken =
        decoder.decodeStructPointer(AttestationToken);
    val.aggregationCoordinator =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebUIReportAggregatableAttributionData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIReportAggregatableAttributionData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(AggregatableHistogramContribution), val.contributions);
    encoder.encodeStructPointer(AttestationToken, val.attestationToken);
    encoder.encodeStruct(codec.String, val.aggregationCoordinator);
  };
  function Empty(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Empty.prototype.initDefaults_ = function() {
  };
  Empty.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Empty.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Empty.encodedSize = codec.kStructHeaderSize + 0;

  Empty.decode = function(decoder) {
    var packed;
    var val = new Empty();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Empty.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Empty.encodedSize);
    encoder.writeUint32(0);
  };
  function WebUIReport(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIReport.prototype.initDefaults_ = function() {
    this.id = null;
    this.reportUrl = null;
    this.triggerTime = 0;
    this.reportTime = 0;
    this.reportBody = null;
    this.status = null;
    this.data = null;
  };
  WebUIReport.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIReport.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReport.id
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, ReportID, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReport.reportUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate WebUIReport.reportBody
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReport.status
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 48, ReportStatus, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIReport.data
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 64, WebUIReportData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIReport.encodedSize = codec.kStructHeaderSize + 80;

  WebUIReport.decode = function(decoder) {
    var packed;
    var val = new WebUIReport();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(ReportID);
    val.reportUrl =
        decoder.decodeStructPointer(url$.Url);
    val.triggerTime =
        decoder.decodeStruct(codec.Double);
    val.reportTime =
        decoder.decodeStruct(codec.Double);
    val.reportBody =
        decoder.decodeStruct(codec.String);
    val.status =
        decoder.decodeStruct(ReportStatus);
    val.data =
        decoder.decodeStruct(WebUIReportData);
    return val;
  };

  WebUIReport.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIReport.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(ReportID, val.id);
    encoder.encodeStructPointer(url$.Url, val.reportUrl);
    encoder.encodeStruct(codec.Double, val.triggerTime);
    encoder.encodeStruct(codec.Double, val.reportTime);
    encoder.encodeStruct(codec.String, val.reportBody);
    encoder.encodeStruct(ReportStatus, val.status);
    encoder.encodeStruct(WebUIReportData, val.data);
  };
  function WebUIDebugReport(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIDebugReport.prototype.initDefaults_ = function() {
    this.url = null;
    this.time = 0;
    this.body = null;
    this.status = null;
  };
  WebUIDebugReport.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIDebugReport.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIDebugReport.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUIDebugReport.body
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIDebugReport.status
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 24, DebugReportStatus, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIDebugReport.encodedSize = codec.kStructHeaderSize + 40;

  WebUIDebugReport.decode = function(decoder) {
    var packed;
    var val = new WebUIDebugReport();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.time =
        decoder.decodeStruct(codec.Double);
    val.body =
        decoder.decodeStruct(codec.String);
    val.status =
        decoder.decodeStruct(DebugReportStatus);
    return val;
  };

  WebUIDebugReport.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIDebugReport.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Double, val.time);
    encoder.encodeStruct(codec.String, val.body);
    encoder.encodeStruct(DebugReportStatus, val.status);
  };
  function WebUISource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  WebUISource.Attributability = {};
  WebUISource.Attributability.kAttributable = 0;
  WebUISource.Attributability.kNoisedNever = 1;
  WebUISource.Attributability.kNoisedFalsely = 2;
  WebUISource.Attributability.kReachedEventLevelAttributionLimit = 3;
  WebUISource.Attributability.MIN_VALUE = 0;
  WebUISource.Attributability.MAX_VALUE = 3;

  WebUISource.Attributability.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  WebUISource.Attributability.toKnownEnumValue = function(value) {
    return value;
  };

  WebUISource.Attributability.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  WebUISource.prototype.initDefaults_ = function() {
    this.sourceEventId = 0;
    this.sourceOrigin = null;
    this.destinations = null;
    this.reportingOrigin = null;
    this.sourceTime = 0;
    this.expiryTime = 0;
    this.eventReportWindowTime = 0;
    this.aggregatableReportWindowTime = 0;
    this.sourceType = 0;
    this.attributability = 0;
    this.priority = 0;
    this.debugKey = null;
    this.dedupKeys = null;
    this.filterData = null;
    this.aggregationKeys = null;
    this.aggregatableBudgetConsumed = 0;
    this.aggregatableDedupKeys = null;
  };
  WebUISource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUISource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 136}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUISource.sourceOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISource.destinations
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(schemeful_site$.SchemefulSite), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISource.reportingOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;






    // validate WebUISource.sourceType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 64, source_type$.SourceType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUISource.debugKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, registration$.DebugKey, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISource.dedupKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 88, 8, codec.Uint64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISource.filterData
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 96, false, codec.String, new codec.ArrayOf(codec.String), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISource.aggregationKeys
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 104, false, codec.String, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUISource.aggregatableDedupKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 120, 8, codec.Uint64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISource.attributability
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 68, WebUISource.Attributability);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUISource.encodedSize = codec.kStructHeaderSize + 128;

  WebUISource.decode = function(decoder) {
    var packed;
    var val = new WebUISource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sourceEventId =
        decoder.decodeStruct(codec.Uint64);
    val.sourceOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.destinations =
        decoder.decodeArrayPointer(new codec.PointerTo(schemeful_site$.SchemefulSite));
    val.reportingOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.sourceTime =
        decoder.decodeStruct(codec.Double);
    val.expiryTime =
        decoder.decodeStruct(codec.Double);
    val.eventReportWindowTime =
        decoder.decodeStruct(codec.Double);
    val.aggregatableReportWindowTime =
        decoder.decodeStruct(codec.Double);
    val.sourceType =
        decoder.decodeStruct(new codec.Enum(source_type$.SourceType));
    val.attributability =
        decoder.decodeStruct(new codec.Enum(WebUISource.Attributability));
    val.priority =
        decoder.decodeStruct(codec.Int64);
    val.debugKey =
        decoder.decodeStructPointer(registration$.DebugKey);
    val.dedupKeys =
        decoder.decodeArrayPointer(codec.Uint64);
    val.filterData =
        decoder.decodeMapPointer(codec.String, new codec.ArrayOf(codec.String));
    val.aggregationKeys =
        decoder.decodeMapPointer(codec.String, codec.String);
    val.aggregatableBudgetConsumed =
        decoder.decodeStruct(codec.Uint64);
    val.aggregatableDedupKeys =
        decoder.decodeArrayPointer(codec.Uint64);
    return val;
  };

  WebUISource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUISource.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.sourceEventId);
    encoder.encodeStructPointer(origin$.Origin, val.sourceOrigin);
    encoder.encodeArrayPointer(new codec.PointerTo(schemeful_site$.SchemefulSite), val.destinations);
    encoder.encodeStructPointer(origin$.Origin, val.reportingOrigin);
    encoder.encodeStruct(codec.Double, val.sourceTime);
    encoder.encodeStruct(codec.Double, val.expiryTime);
    encoder.encodeStruct(codec.Double, val.eventReportWindowTime);
    encoder.encodeStruct(codec.Double, val.aggregatableReportWindowTime);
    encoder.encodeStruct(codec.Int32, val.sourceType);
    encoder.encodeStruct(codec.Int32, val.attributability);
    encoder.encodeStruct(codec.Int64, val.priority);
    encoder.encodeStructPointer(registration$.DebugKey, val.debugKey);
    encoder.encodeArrayPointer(codec.Uint64, val.dedupKeys);
    encoder.encodeMapPointer(codec.String, new codec.ArrayOf(codec.String), val.filterData);
    encoder.encodeMapPointer(codec.String, codec.String, val.aggregationKeys);
    encoder.encodeStruct(codec.Uint64, val.aggregatableBudgetConsumed);
    encoder.encodeArrayPointer(codec.Uint64, val.aggregatableDedupKeys);
  };
  function WebUIRegistration(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebUIRegistration.prototype.initDefaults_ = function() {
    this.time = 0;
    this.contextOrigin = null;
    this.reportingOrigin = null;
    this.registrationJson = null;
    this.clearedDebugKey = null;
  };
  WebUIRegistration.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUIRegistration.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebUIRegistration.contextOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIRegistration.reportingOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIRegistration.registrationJson
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUIRegistration.clearedDebugKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, registration$.DebugKey, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUIRegistration.encodedSize = codec.kStructHeaderSize + 40;

  WebUIRegistration.decode = function(decoder) {
    var packed;
    var val = new WebUIRegistration();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.time =
        decoder.decodeStruct(codec.Double);
    val.contextOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.reportingOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.registrationJson =
        decoder.decodeStruct(codec.String);
    val.clearedDebugKey =
        decoder.decodeStructPointer(registration$.DebugKey);
    return val;
  };

  WebUIRegistration.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUIRegistration.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.time);
    encoder.encodeStructPointer(origin$.Origin, val.contextOrigin);
    encoder.encodeStructPointer(origin$.Origin, val.reportingOrigin);
    encoder.encodeStruct(codec.String, val.registrationJson);
    encoder.encodeStructPointer(registration$.DebugKey, val.clearedDebugKey);
  };
  function WebUITrigger(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  WebUITrigger.Status = {};
  WebUITrigger.Status.kSuccess = 0;
  WebUITrigger.Status.kInternalError = 1;
  WebUITrigger.Status.kNoMatchingSources = 2;
  WebUITrigger.Status.kNoMatchingSourceFilterData = 3;
  WebUITrigger.Status.kNoReportCapacityForDestinationSite = 4;
  WebUITrigger.Status.kExcessiveAttributions = 5;
  WebUITrigger.Status.kExcessiveReportingOrigins = 6;
  WebUITrigger.Status.kProhibitedByBrowserPolicy = 7;
  WebUITrigger.Status.kDeduplicated = 8;
  WebUITrigger.Status.kReportWindowPassed = 9;
  WebUITrigger.Status.kNotRegistered = 10;
  WebUITrigger.Status.kLowPriority = 11;
  WebUITrigger.Status.kNoised = 12;
  WebUITrigger.Status.kNoMatchingConfigurations = 13;
  WebUITrigger.Status.kExcessiveEventLevelReports = 14;
  WebUITrigger.Status.kNoHistograms = 15;
  WebUITrigger.Status.kInsufficientBudget = 16;
  WebUITrigger.Status.MIN_VALUE = 0;
  WebUITrigger.Status.MAX_VALUE = 16;

  WebUITrigger.Status.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    }
    return false;
  };

  WebUITrigger.Status.toKnownEnumValue = function(value) {
    return value;
  };

  WebUITrigger.Status.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  WebUITrigger.prototype.initDefaults_ = function() {
    this.registration = null;
    this.attestation = null;
    this.eventLevelStatus = 0;
    this.aggregatableStatus = 0;
  };
  WebUITrigger.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUITrigger.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUITrigger.registration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUIRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUITrigger.attestation
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, attribution$.TriggerAttestation, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUITrigger.eventLevelStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, WebUITrigger.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUITrigger.aggregatableStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, WebUITrigger.Status);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUITrigger.encodedSize = codec.kStructHeaderSize + 24;

  WebUITrigger.decode = function(decoder) {
    var packed;
    var val = new WebUITrigger();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registration =
        decoder.decodeStructPointer(WebUIRegistration);
    val.attestation =
        decoder.decodeStructPointer(attribution$.TriggerAttestation);
    val.eventLevelStatus =
        decoder.decodeStruct(new codec.Enum(WebUITrigger.Status));
    val.aggregatableStatus =
        decoder.decodeStruct(new codec.Enum(WebUITrigger.Status));
    return val;
  };

  WebUITrigger.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUITrigger.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUIRegistration, val.registration);
    encoder.encodeStructPointer(attribution$.TriggerAttestation, val.attestation);
    encoder.encodeStruct(codec.Int32, val.eventLevelStatus);
    encoder.encodeStruct(codec.Int32, val.aggregatableStatus);
  };
  function WebUISourceRegistration(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  WebUISourceRegistration.Status = {};
  WebUISourceRegistration.Status.kSuccess = 0;
  WebUISourceRegistration.Status.kInvalidJson = 1;
  WebUISourceRegistration.Status.kInternalError = 2;
  WebUISourceRegistration.Status.kInsufficientSourceCapacity = 3;
  WebUISourceRegistration.Status.kInsufficientUniqueDestinationCapacity = 4;
  WebUISourceRegistration.Status.kExcessiveReportingOrigins = 5;
  WebUISourceRegistration.Status.kProhibitedByBrowserPolicy = 6;
  WebUISourceRegistration.Status.MIN_VALUE = 0;
  WebUISourceRegistration.Status.MAX_VALUE = 6;

  WebUISourceRegistration.Status.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  WebUISourceRegistration.Status.toKnownEnumValue = function(value) {
    return value;
  };

  WebUISourceRegistration.Status.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  WebUISourceRegistration.prototype.initDefaults_ = function() {
    this.registration = null;
    this.type = 0;
    this.status = 0;
    this.jsonError = 0;
  };
  WebUISourceRegistration.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebUISourceRegistration.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISourceRegistration.registration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUIRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISourceRegistration.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, source_type$.SourceType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISourceRegistration.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, WebUISourceRegistration.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebUISourceRegistration.jsonError
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, source_registration_error$.SourceRegistrationError);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebUISourceRegistration.encodedSize = codec.kStructHeaderSize + 24;

  WebUISourceRegistration.decode = function(decoder) {
    var packed;
    var val = new WebUISourceRegistration();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registration =
        decoder.decodeStructPointer(WebUIRegistration);
    val.type =
        decoder.decodeStruct(new codec.Enum(source_type$.SourceType));
    val.status =
        decoder.decodeStruct(new codec.Enum(WebUISourceRegistration.Status));
    val.jsonError =
        decoder.decodeStruct(new codec.Enum(source_registration_error$.SourceRegistrationError));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebUISourceRegistration.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebUISourceRegistration.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUIRegistration, val.registration);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.encodeStruct(codec.Int32, val.jsonError);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Observer_OnSourcesChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnSourcesChanged_Params.prototype.initDefaults_ = function() {
  };
  Observer_OnSourcesChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnSourcesChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnSourcesChanged_Params.encodedSize = codec.kStructHeaderSize + 0;

  Observer_OnSourcesChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnSourcesChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Observer_OnSourcesChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnSourcesChanged_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Observer_OnReportsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnReportsChanged_Params.prototype.initDefaults_ = function() {
    this.reportType = 0;
  };
  Observer_OnReportsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnReportsChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Observer_OnReportsChanged_Params.reportType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, attribution_reporting$.ReportType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnReportsChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  Observer_OnReportsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnReportsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reportType =
        decoder.decodeStruct(new codec.Enum(attribution_reporting$.ReportType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Observer_OnReportsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnReportsChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.reportType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Observer_OnSourceHandled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnSourceHandled_Params.prototype.initDefaults_ = function() {
    this.source = null;
  };
  Observer_OnSourceHandled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnSourceHandled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Observer_OnSourceHandled_Params.source
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUISourceRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnSourceHandled_Params.encodedSize = codec.kStructHeaderSize + 8;

  Observer_OnSourceHandled_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnSourceHandled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.source =
        decoder.decodeStructPointer(WebUISourceRegistration);
    return val;
  };

  Observer_OnSourceHandled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnSourceHandled_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUISourceRegistration, val.source);
  };
  function Observer_OnReportSent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnReportSent_Params.prototype.initDefaults_ = function() {
    this.report = null;
  };
  Observer_OnReportSent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnReportSent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Observer_OnReportSent_Params.report
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUIReport, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnReportSent_Params.encodedSize = codec.kStructHeaderSize + 8;

  Observer_OnReportSent_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnReportSent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.report =
        decoder.decodeStructPointer(WebUIReport);
    return val;
  };

  Observer_OnReportSent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnReportSent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUIReport, val.report);
  };
  function Observer_OnDebugReportSent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnDebugReportSent_Params.prototype.initDefaults_ = function() {
    this.report = null;
  };
  Observer_OnDebugReportSent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnDebugReportSent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Observer_OnDebugReportSent_Params.report
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUIDebugReport, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnDebugReportSent_Params.encodedSize = codec.kStructHeaderSize + 8;

  Observer_OnDebugReportSent_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnDebugReportSent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.report =
        decoder.decodeStructPointer(WebUIDebugReport);
    return val;
  };

  Observer_OnDebugReportSent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnDebugReportSent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUIDebugReport, val.report);
  };
  function Observer_OnReportDropped_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnReportDropped_Params.prototype.initDefaults_ = function() {
    this.report = null;
  };
  Observer_OnReportDropped_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnReportDropped_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Observer_OnReportDropped_Params.report
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUIReport, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnReportDropped_Params.encodedSize = codec.kStructHeaderSize + 8;

  Observer_OnReportDropped_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnReportDropped_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.report =
        decoder.decodeStructPointer(WebUIReport);
    return val;
  };

  Observer_OnReportDropped_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnReportDropped_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUIReport, val.report);
  };
  function Observer_OnTriggerHandled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Observer_OnTriggerHandled_Params.prototype.initDefaults_ = function() {
    this.trigger = null;
  };
  Observer_OnTriggerHandled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Observer_OnTriggerHandled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Observer_OnTriggerHandled_Params.trigger
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebUITrigger, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Observer_OnTriggerHandled_Params.encodedSize = codec.kStructHeaderSize + 8;

  Observer_OnTriggerHandled_Params.decode = function(decoder) {
    var packed;
    var val = new Observer_OnTriggerHandled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.trigger =
        decoder.decodeStructPointer(WebUITrigger);
    return val;
  };

  Observer_OnTriggerHandled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Observer_OnTriggerHandled_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebUITrigger, val.trigger);
  };
  function Handler_IsAttributionReportingEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_IsAttributionReportingEnabled_Params.prototype.initDefaults_ = function() {
  };
  Handler_IsAttributionReportingEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_IsAttributionReportingEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_IsAttributionReportingEnabled_Params.encodedSize = codec.kStructHeaderSize + 0;

  Handler_IsAttributionReportingEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new Handler_IsAttributionReportingEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Handler_IsAttributionReportingEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_IsAttributionReportingEnabled_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Handler_IsAttributionReportingEnabled_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_IsAttributionReportingEnabled_ResponseParams.prototype.initDefaults_ = function() {
    this.enabled = false;
    this.debugMode = false;
  };
  Handler_IsAttributionReportingEnabled_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_IsAttributionReportingEnabled_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Handler_IsAttributionReportingEnabled_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Handler_IsAttributionReportingEnabled_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Handler_IsAttributionReportingEnabled_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.enabled = (packed >> 0) & 1 ? true : false;
    val.debugMode = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Handler_IsAttributionReportingEnabled_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_IsAttributionReportingEnabled_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.enabled & 1) << 0
    packed |= (val.debugMode & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Handler_GetActiveSources_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_GetActiveSources_Params.prototype.initDefaults_ = function() {
  };
  Handler_GetActiveSources_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_GetActiveSources_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_GetActiveSources_Params.encodedSize = codec.kStructHeaderSize + 0;

  Handler_GetActiveSources_Params.decode = function(decoder) {
    var packed;
    var val = new Handler_GetActiveSources_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Handler_GetActiveSources_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_GetActiveSources_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Handler_GetActiveSources_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_GetActiveSources_ResponseParams.prototype.initDefaults_ = function() {
    this.sources = null;
  };
  Handler_GetActiveSources_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_GetActiveSources_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Handler_GetActiveSources_ResponseParams.sources
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebUISource), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_GetActiveSources_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Handler_GetActiveSources_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Handler_GetActiveSources_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sources =
        decoder.decodeArrayPointer(new codec.PointerTo(WebUISource));
    return val;
  };

  Handler_GetActiveSources_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_GetActiveSources_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebUISource), val.sources);
  };
  function Handler_GetReports_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_GetReports_Params.prototype.initDefaults_ = function() {
    this.reportType = 0;
  };
  Handler_GetReports_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_GetReports_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Handler_GetReports_Params.reportType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, attribution_reporting$.ReportType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_GetReports_Params.encodedSize = codec.kStructHeaderSize + 8;

  Handler_GetReports_Params.decode = function(decoder) {
    var packed;
    var val = new Handler_GetReports_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reportType =
        decoder.decodeStruct(new codec.Enum(attribution_reporting$.ReportType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Handler_GetReports_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_GetReports_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.reportType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Handler_GetReports_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_GetReports_ResponseParams.prototype.initDefaults_ = function() {
    this.reports = null;
  };
  Handler_GetReports_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_GetReports_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Handler_GetReports_ResponseParams.reports
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebUIReport), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_GetReports_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Handler_GetReports_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Handler_GetReports_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reports =
        decoder.decodeArrayPointer(new codec.PointerTo(WebUIReport));
    return val;
  };

  Handler_GetReports_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_GetReports_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebUIReport), val.reports);
  };
  function Handler_SendReports_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_SendReports_Params.prototype.initDefaults_ = function() {
    this.ids = null;
  };
  Handler_SendReports_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_SendReports_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Handler_SendReports_Params.ids
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 16, ReportID, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_SendReports_Params.encodedSize = codec.kStructHeaderSize + 8;

  Handler_SendReports_Params.decode = function(decoder) {
    var packed;
    var val = new Handler_SendReports_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.ids =
        decoder.decodeArrayPointer(ReportID);
    return val;
  };

  Handler_SendReports_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_SendReports_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(ReportID, val.ids);
  };
  function Handler_SendReports_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_SendReports_ResponseParams.prototype.initDefaults_ = function() {
  };
  Handler_SendReports_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_SendReports_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_SendReports_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Handler_SendReports_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Handler_SendReports_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Handler_SendReports_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_SendReports_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Handler_ClearStorage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_ClearStorage_Params.prototype.initDefaults_ = function() {
  };
  Handler_ClearStorage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_ClearStorage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_ClearStorage_Params.encodedSize = codec.kStructHeaderSize + 0;

  Handler_ClearStorage_Params.decode = function(decoder) {
    var packed;
    var val = new Handler_ClearStorage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Handler_ClearStorage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_ClearStorage_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Handler_ClearStorage_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_ClearStorage_ResponseParams.prototype.initDefaults_ = function() {
  };
  Handler_ClearStorage_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_ClearStorage_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_ClearStorage_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Handler_ClearStorage_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Handler_ClearStorage_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Handler_ClearStorage_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_ClearStorage_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Handler_AddObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_AddObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new ObserverPtr();
  };
  Handler_AddObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_AddObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Handler_AddObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Handler_AddObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  Handler_AddObserver_Params.decode = function(decoder) {
    var packed;
    var val = new Handler_AddObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.Interface(ObserverPtr));
    return val;
  };

  Handler_AddObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_AddObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(ObserverPtr), val.observer);
  };
  function Handler_AddObserver_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Handler_AddObserver_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  Handler_AddObserver_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Handler_AddObserver_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Handler_AddObserver_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Handler_AddObserver_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Handler_AddObserver_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Handler_AddObserver_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Handler_AddObserver_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ReportID(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ReportID.Tags = {
    eventLevelId: 0,
    aggregatableAttributionId: 1,
  };

  ReportID.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ReportID.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "eventLevelId",
        "aggregatableAttributionId",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ReportID member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ReportID.prototype, "eventLevelId", {
    get: function() {
      if (this.$tag != ReportID.Tags.eventLevelId) {
        throw new ReferenceError(
            "ReportID.eventLevelId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportID.Tags.eventLevelId;
      this.$data = value;
    }
  });
  Object.defineProperty(ReportID.prototype, "aggregatableAttributionId", {
    get: function() {
      if (this.$tag != ReportID.Tags.aggregatableAttributionId) {
        throw new ReferenceError(
            "ReportID.aggregatableAttributionId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportID.Tags.aggregatableAttributionId;
      this.$data = value;
    }
  });


    ReportID.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ReportID.Tags.eventLevelId:
          encoder.encodeStructPointer(EventLevelReportID, val.eventLevelId);
          break;
        case ReportID.Tags.aggregatableAttributionId:
          encoder.encodeStructPointer(AggregatableAttributionReportID, val.aggregatableAttributionId);
          break;
      }
      encoder.align();
    };


    ReportID.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ReportID();
      var tag = decoder.readUint32();
      switch (tag) {
        case ReportID.Tags.eventLevelId:
          result.eventLevelId = decoder.decodeStructPointer(EventLevelReportID);
          break;
        case ReportID.Tags.aggregatableAttributionId:
          result.aggregatableAttributionId = decoder.decodeStructPointer(AggregatableAttributionReportID);
          break;
      }
      decoder.align();

      return result;
    };


    ReportID.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ReportID.Tags.eventLevelId:
          

    // validate ReportID.eventLevelId
    err = messageValidator.validateStructPointer(data_offset, EventLevelReportID, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ReportID.Tags.aggregatableAttributionId:
          

    // validate ReportID.aggregatableAttributionId
    err = messageValidator.validateStructPointer(data_offset, AggregatableAttributionReportID, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ReportID.encodedSize = 16;

  function WebUIReportData(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  WebUIReportData.Tags = {
    eventLevelData: 0,
    aggregatableAttributionData: 1,
  };

  WebUIReportData.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  WebUIReportData.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "eventLevelData",
        "aggregatableAttributionData",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a WebUIReportData member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(WebUIReportData.prototype, "eventLevelData", {
    get: function() {
      if (this.$tag != WebUIReportData.Tags.eventLevelData) {
        throw new ReferenceError(
            "WebUIReportData.eventLevelData is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = WebUIReportData.Tags.eventLevelData;
      this.$data = value;
    }
  });
  Object.defineProperty(WebUIReportData.prototype, "aggregatableAttributionData", {
    get: function() {
      if (this.$tag != WebUIReportData.Tags.aggregatableAttributionData) {
        throw new ReferenceError(
            "WebUIReportData.aggregatableAttributionData is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = WebUIReportData.Tags.aggregatableAttributionData;
      this.$data = value;
    }
  });


    WebUIReportData.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case WebUIReportData.Tags.eventLevelData:
          encoder.encodeStructPointer(WebUIReportEventLevelData, val.eventLevelData);
          break;
        case WebUIReportData.Tags.aggregatableAttributionData:
          encoder.encodeStructPointer(WebUIReportAggregatableAttributionData, val.aggregatableAttributionData);
          break;
      }
      encoder.align();
    };


    WebUIReportData.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new WebUIReportData();
      var tag = decoder.readUint32();
      switch (tag) {
        case WebUIReportData.Tags.eventLevelData:
          result.eventLevelData = decoder.decodeStructPointer(WebUIReportEventLevelData);
          break;
        case WebUIReportData.Tags.aggregatableAttributionData:
          result.aggregatableAttributionData = decoder.decodeStructPointer(WebUIReportAggregatableAttributionData);
          break;
      }
      decoder.align();

      return result;
    };


    WebUIReportData.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case WebUIReportData.Tags.eventLevelData:
          

    // validate WebUIReportData.eventLevelData
    err = messageValidator.validateStructPointer(data_offset, WebUIReportEventLevelData, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case WebUIReportData.Tags.aggregatableAttributionData:
          

    // validate WebUIReportData.aggregatableAttributionData
    err = messageValidator.validateStructPointer(data_offset, WebUIReportAggregatableAttributionData, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  WebUIReportData.encodedSize = 16;

  function ReportStatus(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ReportStatus.Tags = {
    pending: 0,
    replacedByHigherPriorityReport: 1,
    prohibitedByBrowserPolicy: 2,
    sent: 3,
    networkError: 4,
    failedToAssemble: 5,
  };

  ReportStatus.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ReportStatus.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "pending",
        "replacedByHigherPriorityReport",
        "prohibitedByBrowserPolicy",
        "sent",
        "networkError",
        "failedToAssemble",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ReportStatus member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ReportStatus.prototype, "pending", {
    get: function() {
      if (this.$tag != ReportStatus.Tags.pending) {
        throw new ReferenceError(
            "ReportStatus.pending is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportStatus.Tags.pending;
      this.$data = value;
    }
  });
  Object.defineProperty(ReportStatus.prototype, "replacedByHigherPriorityReport", {
    get: function() {
      if (this.$tag != ReportStatus.Tags.replacedByHigherPriorityReport) {
        throw new ReferenceError(
            "ReportStatus.replacedByHigherPriorityReport is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportStatus.Tags.replacedByHigherPriorityReport;
      this.$data = value;
    }
  });
  Object.defineProperty(ReportStatus.prototype, "prohibitedByBrowserPolicy", {
    get: function() {
      if (this.$tag != ReportStatus.Tags.prohibitedByBrowserPolicy) {
        throw new ReferenceError(
            "ReportStatus.prohibitedByBrowserPolicy is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportStatus.Tags.prohibitedByBrowserPolicy;
      this.$data = value;
    }
  });
  Object.defineProperty(ReportStatus.prototype, "sent", {
    get: function() {
      if (this.$tag != ReportStatus.Tags.sent) {
        throw new ReferenceError(
            "ReportStatus.sent is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportStatus.Tags.sent;
      this.$data = value;
    }
  });
  Object.defineProperty(ReportStatus.prototype, "networkError", {
    get: function() {
      if (this.$tag != ReportStatus.Tags.networkError) {
        throw new ReferenceError(
            "ReportStatus.networkError is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportStatus.Tags.networkError;
      this.$data = value;
    }
  });
  Object.defineProperty(ReportStatus.prototype, "failedToAssemble", {
    get: function() {
      if (this.$tag != ReportStatus.Tags.failedToAssemble) {
        throw new ReferenceError(
            "ReportStatus.failedToAssemble is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReportStatus.Tags.failedToAssemble;
      this.$data = value;
    }
  });


    ReportStatus.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ReportStatus.Tags.pending:
          encoder.encodeStructPointer(Empty, val.pending);
          break;
        case ReportStatus.Tags.replacedByHigherPriorityReport:
          encoder.encodeStruct(codec.String, val.replacedByHigherPriorityReport);
          break;
        case ReportStatus.Tags.prohibitedByBrowserPolicy:
          encoder.encodeStructPointer(Empty, val.prohibitedByBrowserPolicy);
          break;
        case ReportStatus.Tags.sent:
          encoder.encodeStruct(codec.Int32, val.sent);
          break;
        case ReportStatus.Tags.networkError:
          encoder.encodeStruct(codec.String, val.networkError);
          break;
        case ReportStatus.Tags.failedToAssemble:
          encoder.encodeStructPointer(Empty, val.failedToAssemble);
          break;
      }
      encoder.align();
    };


    ReportStatus.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ReportStatus();
      var tag = decoder.readUint32();
      switch (tag) {
        case ReportStatus.Tags.pending:
          result.pending = decoder.decodeStructPointer(Empty);
          break;
        case ReportStatus.Tags.replacedByHigherPriorityReport:
          result.replacedByHigherPriorityReport = decoder.decodeStruct(codec.String);
          break;
        case ReportStatus.Tags.prohibitedByBrowserPolicy:
          result.prohibitedByBrowserPolicy = decoder.decodeStructPointer(Empty);
          break;
        case ReportStatus.Tags.sent:
          result.sent = decoder.decodeStruct(codec.Int32);
          break;
        case ReportStatus.Tags.networkError:
          result.networkError = decoder.decodeStruct(codec.String);
          break;
        case ReportStatus.Tags.failedToAssemble:
          result.failedToAssemble = decoder.decodeStructPointer(Empty);
          break;
      }
      decoder.align();

      return result;
    };


    ReportStatus.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ReportStatus.Tags.pending:
          

    // validate ReportStatus.pending
    err = messageValidator.validateStructPointer(data_offset, Empty, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ReportStatus.Tags.replacedByHigherPriorityReport:
          

    // validate ReportStatus.replacedByHigherPriorityReport
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ReportStatus.Tags.prohibitedByBrowserPolicy:
          

    // validate ReportStatus.prohibitedByBrowserPolicy
    err = messageValidator.validateStructPointer(data_offset, Empty, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ReportStatus.Tags.sent:
          

          break;
        case ReportStatus.Tags.networkError:
          

    // validate ReportStatus.networkError
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ReportStatus.Tags.failedToAssemble:
          

    // validate ReportStatus.failedToAssemble
    err = messageValidator.validateStructPointer(data_offset, Empty, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ReportStatus.encodedSize = 16;

  function DebugReportStatus(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  DebugReportStatus.Tags = {
    httpResponseCode: 0,
    networkError: 1,
  };

  DebugReportStatus.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  DebugReportStatus.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "httpResponseCode",
        "networkError",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a DebugReportStatus member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(DebugReportStatus.prototype, "httpResponseCode", {
    get: function() {
      if (this.$tag != DebugReportStatus.Tags.httpResponseCode) {
        throw new ReferenceError(
            "DebugReportStatus.httpResponseCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DebugReportStatus.Tags.httpResponseCode;
      this.$data = value;
    }
  });
  Object.defineProperty(DebugReportStatus.prototype, "networkError", {
    get: function() {
      if (this.$tag != DebugReportStatus.Tags.networkError) {
        throw new ReferenceError(
            "DebugReportStatus.networkError is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DebugReportStatus.Tags.networkError;
      this.$data = value;
    }
  });


    DebugReportStatus.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case DebugReportStatus.Tags.httpResponseCode:
          encoder.encodeStruct(codec.Int32, val.httpResponseCode);
          break;
        case DebugReportStatus.Tags.networkError:
          encoder.encodeStruct(codec.String, val.networkError);
          break;
      }
      encoder.align();
    };


    DebugReportStatus.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new DebugReportStatus();
      var tag = decoder.readUint32();
      switch (tag) {
        case DebugReportStatus.Tags.httpResponseCode:
          result.httpResponseCode = decoder.decodeStruct(codec.Int32);
          break;
        case DebugReportStatus.Tags.networkError:
          result.networkError = decoder.decodeStruct(codec.String);
          break;
      }
      decoder.align();

      return result;
    };


    DebugReportStatus.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case DebugReportStatus.Tags.httpResponseCode:
          

          break;
        case DebugReportStatus.Tags.networkError:
          

    // validate DebugReportStatus.networkError
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  DebugReportStatus.encodedSize = 16;
  var kObserver_OnSourcesChanged_Name = 882529100;
  var kObserver_OnReportsChanged_Name = 677973582;
  var kObserver_OnSourceHandled_Name = 15795565;
  var kObserver_OnReportSent_Name = 940636974;
  var kObserver_OnDebugReportSent_Name = 944039434;
  var kObserver_OnReportDropped_Name = 1271491173;
  var kObserver_OnTriggerHandled_Name = 644543736;

  function ObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Observer,
                                                   handleOrPtrInfo);
  }

  function ObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Observer, associatedInterfacePtrInfo);
  }

  ObserverAssociatedPtr.prototype =
      Object.create(ObserverPtr.prototype);
  ObserverAssociatedPtr.prototype.constructor =
      ObserverAssociatedPtr;

  function ObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  ObserverPtr.prototype.onSourcesChanged = function() {
    return ObserverProxy.prototype.onSourcesChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onSourcesChanged = function() {
    var params_ = new Observer_OnSourcesChanged_Params();
    var builder = new codec.MessageV0Builder(
        kObserver_OnSourcesChanged_Name,
        codec.align(Observer_OnSourcesChanged_Params.encodedSize));
    builder.encodeStruct(Observer_OnSourcesChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ObserverPtr.prototype.onReportsChanged = function() {
    return ObserverProxy.prototype.onReportsChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onReportsChanged = function(reportType) {
    var params_ = new Observer_OnReportsChanged_Params();
    params_.reportType = reportType;
    var builder = new codec.MessageV0Builder(
        kObserver_OnReportsChanged_Name,
        codec.align(Observer_OnReportsChanged_Params.encodedSize));
    builder.encodeStruct(Observer_OnReportsChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ObserverPtr.prototype.onSourceHandled = function() {
    return ObserverProxy.prototype.onSourceHandled
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onSourceHandled = function(source) {
    var params_ = new Observer_OnSourceHandled_Params();
    params_.source = source;
    var builder = new codec.MessageV0Builder(
        kObserver_OnSourceHandled_Name,
        codec.align(Observer_OnSourceHandled_Params.encodedSize));
    builder.encodeStruct(Observer_OnSourceHandled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ObserverPtr.prototype.onReportSent = function() {
    return ObserverProxy.prototype.onReportSent
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onReportSent = function(report) {
    var params_ = new Observer_OnReportSent_Params();
    params_.report = report;
    var builder = new codec.MessageV0Builder(
        kObserver_OnReportSent_Name,
        codec.align(Observer_OnReportSent_Params.encodedSize));
    builder.encodeStruct(Observer_OnReportSent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ObserverPtr.prototype.onDebugReportSent = function() {
    return ObserverProxy.prototype.onDebugReportSent
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onDebugReportSent = function(report) {
    var params_ = new Observer_OnDebugReportSent_Params();
    params_.report = report;
    var builder = new codec.MessageV0Builder(
        kObserver_OnDebugReportSent_Name,
        codec.align(Observer_OnDebugReportSent_Params.encodedSize));
    builder.encodeStruct(Observer_OnDebugReportSent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ObserverPtr.prototype.onReportDropped = function() {
    return ObserverProxy.prototype.onReportDropped
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onReportDropped = function(report) {
    var params_ = new Observer_OnReportDropped_Params();
    params_.report = report;
    var builder = new codec.MessageV0Builder(
        kObserver_OnReportDropped_Name,
        codec.align(Observer_OnReportDropped_Params.encodedSize));
    builder.encodeStruct(Observer_OnReportDropped_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ObserverPtr.prototype.onTriggerHandled = function() {
    return ObserverProxy.prototype.onTriggerHandled
        .apply(this.ptr.getProxy(), arguments);
  };

  ObserverProxy.prototype.onTriggerHandled = function(trigger) {
    var params_ = new Observer_OnTriggerHandled_Params();
    params_.trigger = trigger;
    var builder = new codec.MessageV0Builder(
        kObserver_OnTriggerHandled_Name,
        codec.align(Observer_OnTriggerHandled_Params.encodedSize));
    builder.encodeStruct(Observer_OnTriggerHandled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  ObserverStub.prototype.onSourcesChanged = function() {
    return this.delegate_ && this.delegate_.onSourcesChanged && this.delegate_.onSourcesChanged();
  }
  ObserverStub.prototype.onReportsChanged = function(reportType) {
    return this.delegate_ && this.delegate_.onReportsChanged && this.delegate_.onReportsChanged(reportType);
  }
  ObserverStub.prototype.onSourceHandled = function(source) {
    return this.delegate_ && this.delegate_.onSourceHandled && this.delegate_.onSourceHandled(source);
  }
  ObserverStub.prototype.onReportSent = function(report) {
    return this.delegate_ && this.delegate_.onReportSent && this.delegate_.onReportSent(report);
  }
  ObserverStub.prototype.onDebugReportSent = function(report) {
    return this.delegate_ && this.delegate_.onDebugReportSent && this.delegate_.onDebugReportSent(report);
  }
  ObserverStub.prototype.onReportDropped = function(report) {
    return this.delegate_ && this.delegate_.onReportDropped && this.delegate_.onReportDropped(report);
  }
  ObserverStub.prototype.onTriggerHandled = function(trigger) {
    return this.delegate_ && this.delegate_.onTriggerHandled && this.delegate_.onTriggerHandled(trigger);
  }

  ObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kObserver_OnSourcesChanged_Name:
      var params = reader.decodeStruct(Observer_OnSourcesChanged_Params);
      this.onSourcesChanged();
      return true;
    case kObserver_OnReportsChanged_Name:
      var params = reader.decodeStruct(Observer_OnReportsChanged_Params);
      this.onReportsChanged(params.reportType);
      return true;
    case kObserver_OnSourceHandled_Name:
      var params = reader.decodeStruct(Observer_OnSourceHandled_Params);
      this.onSourceHandled(params.source);
      return true;
    case kObserver_OnReportSent_Name:
      var params = reader.decodeStruct(Observer_OnReportSent_Params);
      this.onReportSent(params.report);
      return true;
    case kObserver_OnDebugReportSent_Name:
      var params = reader.decodeStruct(Observer_OnDebugReportSent_Params);
      this.onDebugReportSent(params.report);
      return true;
    case kObserver_OnReportDropped_Name:
      var params = reader.decodeStruct(Observer_OnReportDropped_Params);
      this.onReportDropped(params.report);
      return true;
    case kObserver_OnTriggerHandled_Name:
      var params = reader.decodeStruct(Observer_OnTriggerHandled_Params);
      this.onTriggerHandled(params.trigger);
      return true;
    default:
      return false;
    }
  };

  ObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kObserver_OnSourcesChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnSourcesChanged_Params;
      break;
      case kObserver_OnReportsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnReportsChanged_Params;
      break;
      case kObserver_OnSourceHandled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnSourceHandled_Params;
      break;
      case kObserver_OnReportSent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnReportSent_Params;
      break;
      case kObserver_OnDebugReportSent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnDebugReportSent_Params;
      break;
      case kObserver_OnReportDropped_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnReportDropped_Params;
      break;
      case kObserver_OnTriggerHandled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Observer_OnTriggerHandled_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Observer = {
    name: 'attribution_internals.mojom.Observer',
    kVersion: 0,
    ptrClass: ObserverPtr,
    proxyClass: ObserverProxy,
    stubClass: ObserverStub,
    validateRequest: validateObserverRequest,
    validateResponse: null,
  };
  ObserverStub.prototype.validator = validateObserverRequest;
  ObserverProxy.prototype.validator = null;
  var kHandler_IsAttributionReportingEnabled_Name = 859582366;
  var kHandler_GetActiveSources_Name = 778507464;
  var kHandler_GetReports_Name = 1610459179;
  var kHandler_SendReports_Name = 196104113;
  var kHandler_ClearStorage_Name = 1871972236;
  var kHandler_AddObserver_Name = 125026494;

  function HandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Handler,
                                                   handleOrPtrInfo);
  }

  function HandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Handler, associatedInterfacePtrInfo);
  }

  HandlerAssociatedPtr.prototype =
      Object.create(HandlerPtr.prototype);
  HandlerAssociatedPtr.prototype.constructor =
      HandlerAssociatedPtr;

  function HandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  HandlerPtr.prototype.isAttributionReportingEnabled = function() {
    return HandlerProxy.prototype.isAttributionReportingEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  HandlerProxy.prototype.isAttributionReportingEnabled = function() {
    var params_ = new Handler_IsAttributionReportingEnabled_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHandler_IsAttributionReportingEnabled_Name,
          codec.align(Handler_IsAttributionReportingEnabled_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Handler_IsAttributionReportingEnabled_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Handler_IsAttributionReportingEnabled_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HandlerPtr.prototype.getActiveSources = function() {
    return HandlerProxy.prototype.getActiveSources
        .apply(this.ptr.getProxy(), arguments);
  };

  HandlerProxy.prototype.getActiveSources = function() {
    var params_ = new Handler_GetActiveSources_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHandler_GetActiveSources_Name,
          codec.align(Handler_GetActiveSources_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Handler_GetActiveSources_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Handler_GetActiveSources_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HandlerPtr.prototype.getReports = function() {
    return HandlerProxy.prototype.getReports
        .apply(this.ptr.getProxy(), arguments);
  };

  HandlerProxy.prototype.getReports = function(reportType) {
    var params_ = new Handler_GetReports_Params();
    params_.reportType = reportType;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHandler_GetReports_Name,
          codec.align(Handler_GetReports_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Handler_GetReports_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Handler_GetReports_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HandlerPtr.prototype.sendReports = function() {
    return HandlerProxy.prototype.sendReports
        .apply(this.ptr.getProxy(), arguments);
  };

  HandlerProxy.prototype.sendReports = function(ids) {
    var params_ = new Handler_SendReports_Params();
    params_.ids = ids;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHandler_SendReports_Name,
          codec.align(Handler_SendReports_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Handler_SendReports_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Handler_SendReports_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HandlerPtr.prototype.clearStorage = function() {
    return HandlerProxy.prototype.clearStorage
        .apply(this.ptr.getProxy(), arguments);
  };

  HandlerProxy.prototype.clearStorage = function() {
    var params_ = new Handler_ClearStorage_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHandler_ClearStorage_Name,
          codec.align(Handler_ClearStorage_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Handler_ClearStorage_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Handler_ClearStorage_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  HandlerPtr.prototype.addObserver = function() {
    return HandlerProxy.prototype.addObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  HandlerProxy.prototype.addObserver = function(observer) {
    var params_ = new Handler_AddObserver_Params();
    params_.observer = observer;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kHandler_AddObserver_Name,
          codec.align(Handler_AddObserver_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Handler_AddObserver_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Handler_AddObserver_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function HandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  HandlerStub.prototype.isAttributionReportingEnabled = function() {
    return this.delegate_ && this.delegate_.isAttributionReportingEnabled && this.delegate_.isAttributionReportingEnabled();
  }
  HandlerStub.prototype.getActiveSources = function() {
    return this.delegate_ && this.delegate_.getActiveSources && this.delegate_.getActiveSources();
  }
  HandlerStub.prototype.getReports = function(reportType) {
    return this.delegate_ && this.delegate_.getReports && this.delegate_.getReports(reportType);
  }
  HandlerStub.prototype.sendReports = function(ids) {
    return this.delegate_ && this.delegate_.sendReports && this.delegate_.sendReports(ids);
  }
  HandlerStub.prototype.clearStorage = function() {
    return this.delegate_ && this.delegate_.clearStorage && this.delegate_.clearStorage();
  }
  HandlerStub.prototype.addObserver = function(observer) {
    return this.delegate_ && this.delegate_.addObserver && this.delegate_.addObserver(observer);
  }

  HandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  HandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kHandler_IsAttributionReportingEnabled_Name:
      var params = reader.decodeStruct(Handler_IsAttributionReportingEnabled_Params);
      this.isAttributionReportingEnabled().then(function(response) {
        var responseParams =
            new Handler_IsAttributionReportingEnabled_ResponseParams();
        responseParams.enabled = response.enabled;
        responseParams.debugMode = response.debugMode;
        var builder = new codec.MessageV1Builder(
            kHandler_IsAttributionReportingEnabled_Name,
            codec.align(Handler_IsAttributionReportingEnabled_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Handler_IsAttributionReportingEnabled_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHandler_GetActiveSources_Name:
      var params = reader.decodeStruct(Handler_GetActiveSources_Params);
      this.getActiveSources().then(function(response) {
        var responseParams =
            new Handler_GetActiveSources_ResponseParams();
        responseParams.sources = response.sources;
        var builder = new codec.MessageV1Builder(
            kHandler_GetActiveSources_Name,
            codec.align(Handler_GetActiveSources_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Handler_GetActiveSources_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHandler_GetReports_Name:
      var params = reader.decodeStruct(Handler_GetReports_Params);
      this.getReports(params.reportType).then(function(response) {
        var responseParams =
            new Handler_GetReports_ResponseParams();
        responseParams.reports = response.reports;
        var builder = new codec.MessageV1Builder(
            kHandler_GetReports_Name,
            codec.align(Handler_GetReports_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Handler_GetReports_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHandler_SendReports_Name:
      var params = reader.decodeStruct(Handler_SendReports_Params);
      this.sendReports(params.ids).then(function(response) {
        var responseParams =
            new Handler_SendReports_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kHandler_SendReports_Name,
            codec.align(Handler_SendReports_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Handler_SendReports_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHandler_ClearStorage_Name:
      var params = reader.decodeStruct(Handler_ClearStorage_Params);
      this.clearStorage().then(function(response) {
        var responseParams =
            new Handler_ClearStorage_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kHandler_ClearStorage_Name,
            codec.align(Handler_ClearStorage_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Handler_ClearStorage_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kHandler_AddObserver_Name:
      var params = reader.decodeStruct(Handler_AddObserver_Params);
      this.addObserver(params.observer).then(function(response) {
        var responseParams =
            new Handler_AddObserver_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kHandler_AddObserver_Name,
            codec.align(Handler_AddObserver_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Handler_AddObserver_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kHandler_IsAttributionReportingEnabled_Name:
        if (message.expectsResponse())
          paramsClass = Handler_IsAttributionReportingEnabled_Params;
      break;
      case kHandler_GetActiveSources_Name:
        if (message.expectsResponse())
          paramsClass = Handler_GetActiveSources_Params;
      break;
      case kHandler_GetReports_Name:
        if (message.expectsResponse())
          paramsClass = Handler_GetReports_Params;
      break;
      case kHandler_SendReports_Name:
        if (message.expectsResponse())
          paramsClass = Handler_SendReports_Params;
      break;
      case kHandler_ClearStorage_Name:
        if (message.expectsResponse())
          paramsClass = Handler_ClearStorage_Params;
      break;
      case kHandler_AddObserver_Name:
        if (message.expectsResponse())
          paramsClass = Handler_AddObserver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kHandler_IsAttributionReportingEnabled_Name:
        if (message.isResponse())
          paramsClass = Handler_IsAttributionReportingEnabled_ResponseParams;
        break;
      case kHandler_GetActiveSources_Name:
        if (message.isResponse())
          paramsClass = Handler_GetActiveSources_ResponseParams;
        break;
      case kHandler_GetReports_Name:
        if (message.isResponse())
          paramsClass = Handler_GetReports_ResponseParams;
        break;
      case kHandler_SendReports_Name:
        if (message.isResponse())
          paramsClass = Handler_SendReports_ResponseParams;
        break;
      case kHandler_ClearStorage_Name:
        if (message.isResponse())
          paramsClass = Handler_ClearStorage_ResponseParams;
        break;
      case kHandler_AddObserver_Name:
        if (message.isResponse())
          paramsClass = Handler_AddObserver_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Handler = {
    name: 'attribution_internals.mojom.Handler',
    kVersion: 0,
    ptrClass: HandlerPtr,
    proxyClass: HandlerProxy,
    stubClass: HandlerStub,
    validateRequest: validateHandlerRequest,
    validateResponse: validateHandlerResponse,
  };
  HandlerStub.prototype.validator = validateHandlerRequest;
  HandlerProxy.prototype.validator = validateHandlerResponse;
  exports.EventLevelReportID = EventLevelReportID;
  exports.AggregatableAttributionReportID = AggregatableAttributionReportID;
  exports.WebUIReportEventLevelData = WebUIReportEventLevelData;
  exports.AggregatableHistogramContribution = AggregatableHistogramContribution;
  exports.AttestationToken = AttestationToken;
  exports.WebUIReportAggregatableAttributionData = WebUIReportAggregatableAttributionData;
  exports.Empty = Empty;
  exports.WebUIReport = WebUIReport;
  exports.WebUIDebugReport = WebUIDebugReport;
  exports.WebUISource = WebUISource;
  exports.WebUIRegistration = WebUIRegistration;
  exports.WebUITrigger = WebUITrigger;
  exports.WebUISourceRegistration = WebUISourceRegistration;
  exports.ReportID = ReportID;
  exports.WebUIReportData = WebUIReportData;
  exports.ReportStatus = ReportStatus;
  exports.DebugReportStatus = DebugReportStatus;
  exports.Observer = Observer;
  exports.ObserverPtr = ObserverPtr;
  exports.ObserverAssociatedPtr = ObserverAssociatedPtr;
  exports.Handler = Handler;
  exports.HandlerPtr = HandlerPtr;
  exports.HandlerAssociatedPtr = HandlerAssociatedPtr;
})();