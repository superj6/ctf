// third_party/blink/public/mojom/direct_sockets/direct_sockets.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/direct_sockets/direct_sockets.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var read_only_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_buffer.mojom', '../../../../../mojo/public/mojom/base/read_only_buffer.mojom.js');
  }
  var restricted_udp_socket$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/restricted_udp_socket.mojom', '../../../../../services/network/public/mojom/restricted_udp_socket.mojom.js');
  }
  var ip_endpoint$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/ip_endpoint.mojom', '../../../../../services/network/public/mojom/ip_endpoint.mojom.js');
  }
  var mutable_network_traffic_annotation_tag$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/mutable_network_traffic_annotation_tag.mojom', '../../../../../services/network/public/mojom/mutable_network_traffic_annotation_tag.mojom.js');
  }
  var network_param$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_param.mojom', '../../../../../services/network/public/mojom/network_param.mojom.js');
  }
  var tcp_socket$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/tcp_socket.mojom', '../../../../../services/network/public/mojom/tcp_socket.mojom.js');
  }
  var udp_socket$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/udp_socket.mojom', '../../../../../services/network/public/mojom/udp_socket.mojom.js');
  }


  var DirectSocketFailureType = {};
  DirectSocketFailureType.kPermissionsPolicy = 0;
  DirectSocketFailureType.kTransientActivation = 1;
  DirectSocketFailureType.kUserDialog = 2;
  DirectSocketFailureType.kResolvingToNonPublic = 3;
  DirectSocketFailureType.kRateLimiting = 4;
  DirectSocketFailureType.kCORS = 5;
  DirectSocketFailureType.kEnterprisePolicy = 6;
  DirectSocketFailureType.MIN_VALUE = 0;
  DirectSocketFailureType.MAX_VALUE = 6;

  DirectSocketFailureType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  DirectSocketFailureType.toKnownEnumValue = function(value) {
    return value;
  };

  DirectSocketFailureType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DirectSocketProtocolType = {};
  DirectSocketProtocolType.kTcp = 0;
  DirectSocketProtocolType.kUdp = 1;
  DirectSocketProtocolType.kUdpServer = 2;
  DirectSocketProtocolType.MIN_VALUE = 0;
  DirectSocketProtocolType.MAX_VALUE = 2;

  DirectSocketProtocolType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  DirectSocketProtocolType.toKnownEnumValue = function(value) {
    return value;
  };

  DirectSocketProtocolType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function DirectTCPSocketOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectTCPSocketOptions.prototype.initDefaults_ = function() {
    this.remoteAddr = null;
    this.localAddr = null;
    this.sendBufferSize = 0;
    this.receiveBufferSize = 0;
    this.noDelay = false;
    this.keepAliveOptions = null;
  };
  DirectTCPSocketOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectTCPSocketOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectTCPSocketOptions.remoteAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, network_param$.HostPortPair, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectTCPSocketOptions.localAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ip_endpoint$.IPEndPoint, true);
    if (err !== validator.validationError.NONE)
        return err;





    // validate DirectTCPSocketOptions.keepAliveOptions
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, tcp_socket$.TCPKeepAliveOptions, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectTCPSocketOptions.encodedSize = codec.kStructHeaderSize + 40;

  DirectTCPSocketOptions.decode = function(decoder) {
    var packed;
    var val = new DirectTCPSocketOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remoteAddr =
        decoder.decodeStructPointer(network_param$.HostPortPair);
    val.localAddr =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.sendBufferSize =
        decoder.decodeStruct(codec.Int32);
    val.receiveBufferSize =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.noDelay = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.keepAliveOptions =
        decoder.decodeStructPointer(tcp_socket$.TCPKeepAliveOptions);
    return val;
  };

  DirectTCPSocketOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectTCPSocketOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(network_param$.HostPortPair, val.remoteAddr);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.localAddr);
    encoder.encodeStruct(codec.Int32, val.sendBufferSize);
    encoder.encodeStruct(codec.Int32, val.receiveBufferSize);
    packed = 0;
    packed |= (val.noDelay & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(tcp_socket$.TCPKeepAliveOptions, val.keepAliveOptions);
  };
  function DirectUDPSocketOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectUDPSocketOptions.prototype.initDefaults_ = function() {
    this.remoteAddr = null;
    this.localAddr = null;
    this.sendBufferSize = 0;
    this.receiveBufferSize = 0;
  };
  DirectUDPSocketOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectUDPSocketOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectUDPSocketOptions.remoteAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, network_param$.HostPortPair, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectUDPSocketOptions.localAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ip_endpoint$.IPEndPoint, true);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  DirectUDPSocketOptions.encodedSize = codec.kStructHeaderSize + 24;

  DirectUDPSocketOptions.decode = function(decoder) {
    var packed;
    var val = new DirectUDPSocketOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remoteAddr =
        decoder.decodeStructPointer(network_param$.HostPortPair);
    val.localAddr =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.sendBufferSize =
        decoder.decodeStruct(codec.Int32);
    val.receiveBufferSize =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  DirectUDPSocketOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectUDPSocketOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(network_param$.HostPortPair, val.remoteAddr);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.localAddr);
    encoder.encodeStruct(codec.Int32, val.sendBufferSize);
    encoder.encodeStruct(codec.Int32, val.receiveBufferSize);
  };
  function DirectSocketsService_OpenTCPSocket_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectSocketsService_OpenTCPSocket_Params.prototype.initDefaults_ = function() {
    this.options = null;
    this.receiver = new bindings.InterfaceRequest();
    this.observer = new tcp_socket$.SocketObserverPtr();
  };
  DirectSocketsService_OpenTCPSocket_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectSocketsService_OpenTCPSocket_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenTCPSocket_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DirectTCPSocketOptions, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenTCPSocket_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenTCPSocket_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 12, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectSocketsService_OpenTCPSocket_Params.encodedSize = codec.kStructHeaderSize + 24;

  DirectSocketsService_OpenTCPSocket_Params.decode = function(decoder) {
    var packed;
    var val = new DirectSocketsService_OpenTCPSocket_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options =
        decoder.decodeStructPointer(DirectTCPSocketOptions);
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.observer =
        decoder.decodeStruct(new codec.NullableInterface(tcp_socket$.SocketObserverPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DirectSocketsService_OpenTCPSocket_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectSocketsService_OpenTCPSocket_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DirectTCPSocketOptions, val.options);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.NullableInterface(tcp_socket$.SocketObserverPtr), val.observer);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DirectSocketsService_OpenTCPSocket_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectSocketsService_OpenTCPSocket_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.receiveStream = null;
    this.localAddr = null;
    this.peerAddr = null;
    this.sendStream = null;
  };
  DirectSocketsService_OpenTCPSocket_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectSocketsService_OpenTCPSocket_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DirectSocketsService_OpenTCPSocket_ResponseParams.localAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ip_endpoint$.IPEndPoint, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenTCPSocket_ResponseParams.peerAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, ip_endpoint$.IPEndPoint, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenTCPSocket_ResponseParams.receiveStream
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenTCPSocket_ResponseParams.sendStream
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectSocketsService_OpenTCPSocket_ResponseParams.encodedSize = codec.kStructHeaderSize + 32;

  DirectSocketsService_OpenTCPSocket_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DirectSocketsService_OpenTCPSocket_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(codec.Int32);
    val.receiveStream =
        decoder.decodeStruct(codec.NullableHandle);
    val.localAddr =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.peerAddr =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.sendStream =
        decoder.decodeStruct(codec.NullableHandle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DirectSocketsService_OpenTCPSocket_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectSocketsService_OpenTCPSocket_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.encodeStruct(codec.NullableHandle, val.receiveStream);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.localAddr);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.peerAddr);
    encoder.encodeStruct(codec.NullableHandle, val.sendStream);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DirectSocketsService_OpenUDPSocket_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectSocketsService_OpenUDPSocket_Params.prototype.initDefaults_ = function() {
    this.options = null;
    this.receiver = new bindings.InterfaceRequest();
    this.listener = new udp_socket$.UDPSocketListenerPtr();
  };
  DirectSocketsService_OpenUDPSocket_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectSocketsService_OpenUDPSocket_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenUDPSocket_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DirectUDPSocketOptions, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenUDPSocket_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenUDPSocket_Params.listener
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 12, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectSocketsService_OpenUDPSocket_Params.encodedSize = codec.kStructHeaderSize + 24;

  DirectSocketsService_OpenUDPSocket_Params.decode = function(decoder) {
    var packed;
    var val = new DirectSocketsService_OpenUDPSocket_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options =
        decoder.decodeStructPointer(DirectUDPSocketOptions);
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.listener =
        decoder.decodeStruct(new codec.NullableInterface(udp_socket$.UDPSocketListenerPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DirectSocketsService_OpenUDPSocket_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectSocketsService_OpenUDPSocket_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DirectUDPSocketOptions, val.options);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.NullableInterface(udp_socket$.UDPSocketListenerPtr), val.listener);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DirectSocketsService_OpenUDPSocket_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectSocketsService_OpenUDPSocket_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.localAddr = null;
    this.peerAddr = null;
  };
  DirectSocketsService_OpenUDPSocket_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectSocketsService_OpenUDPSocket_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DirectSocketsService_OpenUDPSocket_ResponseParams.localAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ip_endpoint$.IPEndPoint, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectSocketsService_OpenUDPSocket_ResponseParams.peerAddr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, ip_endpoint$.IPEndPoint, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectSocketsService_OpenUDPSocket_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  DirectSocketsService_OpenUDPSocket_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DirectSocketsService_OpenUDPSocket_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.localAddr =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.peerAddr =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    return val;
  };

  DirectSocketsService_OpenUDPSocket_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectSocketsService_OpenUDPSocket_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.localAddr);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.peerAddr);
  };
  var kDirectSocketsService_OpenTCPSocket_Name = 0;
  var kDirectSocketsService_OpenUDPSocket_Name = 1;

  function DirectSocketsServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DirectSocketsService,
                                                   handleOrPtrInfo);
  }

  function DirectSocketsServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DirectSocketsService, associatedInterfacePtrInfo);
  }

  DirectSocketsServiceAssociatedPtr.prototype =
      Object.create(DirectSocketsServicePtr.prototype);
  DirectSocketsServiceAssociatedPtr.prototype.constructor =
      DirectSocketsServiceAssociatedPtr;

  function DirectSocketsServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  DirectSocketsServicePtr.prototype.openTCPSocket = function() {
    return DirectSocketsServiceProxy.prototype.openTCPSocket
        .apply(this.ptr.getProxy(), arguments);
  };

  DirectSocketsServiceProxy.prototype.openTCPSocket = function(options, receiver, observer) {
    var params_ = new DirectSocketsService_OpenTCPSocket_Params();
    params_.options = options;
    params_.receiver = receiver;
    params_.observer = observer;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDirectSocketsService_OpenTCPSocket_Name,
          codec.align(DirectSocketsService_OpenTCPSocket_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DirectSocketsService_OpenTCPSocket_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DirectSocketsService_OpenTCPSocket_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DirectSocketsServicePtr.prototype.openUDPSocket = function() {
    return DirectSocketsServiceProxy.prototype.openUDPSocket
        .apply(this.ptr.getProxy(), arguments);
  };

  DirectSocketsServiceProxy.prototype.openUDPSocket = function(options, receiver, listener) {
    var params_ = new DirectSocketsService_OpenUDPSocket_Params();
    params_.options = options;
    params_.receiver = receiver;
    params_.listener = listener;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDirectSocketsService_OpenUDPSocket_Name,
          codec.align(DirectSocketsService_OpenUDPSocket_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DirectSocketsService_OpenUDPSocket_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DirectSocketsService_OpenUDPSocket_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function DirectSocketsServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  DirectSocketsServiceStub.prototype.openTCPSocket = function(options, receiver, observer) {
    return this.delegate_ && this.delegate_.openTCPSocket && this.delegate_.openTCPSocket(options, receiver, observer);
  }
  DirectSocketsServiceStub.prototype.openUDPSocket = function(options, receiver, listener) {
    return this.delegate_ && this.delegate_.openUDPSocket && this.delegate_.openUDPSocket(options, receiver, listener);
  }

  DirectSocketsServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  DirectSocketsServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDirectSocketsService_OpenTCPSocket_Name:
      var params = reader.decodeStruct(DirectSocketsService_OpenTCPSocket_Params);
      this.openTCPSocket(params.options, params.receiver, params.observer).then(function(response) {
        var responseParams =
            new DirectSocketsService_OpenTCPSocket_ResponseParams();
        responseParams.result = response.result;
        responseParams.localAddr = response.localAddr;
        responseParams.peerAddr = response.peerAddr;
        responseParams.receiveStream = response.receiveStream;
        responseParams.sendStream = response.sendStream;
        var builder = new codec.MessageV1Builder(
            kDirectSocketsService_OpenTCPSocket_Name,
            codec.align(DirectSocketsService_OpenTCPSocket_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DirectSocketsService_OpenTCPSocket_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kDirectSocketsService_OpenUDPSocket_Name:
      var params = reader.decodeStruct(DirectSocketsService_OpenUDPSocket_Params);
      this.openUDPSocket(params.options, params.receiver, params.listener).then(function(response) {
        var responseParams =
            new DirectSocketsService_OpenUDPSocket_ResponseParams();
        responseParams.result = response.result;
        responseParams.localAddr = response.localAddr;
        responseParams.peerAddr = response.peerAddr;
        var builder = new codec.MessageV1Builder(
            kDirectSocketsService_OpenUDPSocket_Name,
            codec.align(DirectSocketsService_OpenUDPSocket_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DirectSocketsService_OpenUDPSocket_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDirectSocketsServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDirectSocketsService_OpenTCPSocket_Name:
        if (message.expectsResponse())
          paramsClass = DirectSocketsService_OpenTCPSocket_Params;
      break;
      case kDirectSocketsService_OpenUDPSocket_Name:
        if (message.expectsResponse())
          paramsClass = DirectSocketsService_OpenUDPSocket_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDirectSocketsServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDirectSocketsService_OpenTCPSocket_Name:
        if (message.isResponse())
          paramsClass = DirectSocketsService_OpenTCPSocket_ResponseParams;
        break;
      case kDirectSocketsService_OpenUDPSocket_Name:
        if (message.isResponse())
          paramsClass = DirectSocketsService_OpenUDPSocket_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var DirectSocketsService = {
    name: 'blink.mojom.DirectSocketsService',
    kVersion: 0,
    ptrClass: DirectSocketsServicePtr,
    proxyClass: DirectSocketsServiceProxy,
    stubClass: DirectSocketsServiceStub,
    validateRequest: validateDirectSocketsServiceRequest,
    validateResponse: validateDirectSocketsServiceResponse,
  };
  DirectSocketsServiceStub.prototype.validator = validateDirectSocketsServiceRequest;
  DirectSocketsServiceProxy.prototype.validator = validateDirectSocketsServiceResponse;
  exports.DirectSocketFailureType = DirectSocketFailureType;
  exports.DirectSocketProtocolType = DirectSocketProtocolType;
  exports.DirectTCPSocketOptions = DirectTCPSocketOptions;
  exports.DirectUDPSocketOptions = DirectUDPSocketOptions;
  exports.DirectSocketsService = DirectSocketsService;
  exports.DirectSocketsServicePtr = DirectSocketsServicePtr;
  exports.DirectSocketsServiceAssociatedPtr = DirectSocketsServiceAssociatedPtr;
})();