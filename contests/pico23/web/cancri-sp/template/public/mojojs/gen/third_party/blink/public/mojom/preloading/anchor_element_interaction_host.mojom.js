// third_party/blink/public/mojom/preloading/anchor_element_interaction_host.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/preloading/anchor_element_interaction_host.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function AnchorElementInteractionHost_OnPointerDown_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AnchorElementInteractionHost_OnPointerDown_Params.prototype.initDefaults_ = function() {
    this.target = null;
  };
  AnchorElementInteractionHost_OnPointerDown_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AnchorElementInteractionHost_OnPointerDown_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AnchorElementInteractionHost_OnPointerDown_Params.target
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AnchorElementInteractionHost_OnPointerDown_Params.encodedSize = codec.kStructHeaderSize + 8;

  AnchorElementInteractionHost_OnPointerDown_Params.decode = function(decoder) {
    var packed;
    var val = new AnchorElementInteractionHost_OnPointerDown_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.target =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  AnchorElementInteractionHost_OnPointerDown_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AnchorElementInteractionHost_OnPointerDown_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.target);
  };
  function AnchorElementInteractionHost_OnPointerHover_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AnchorElementInteractionHost_OnPointerHover_Params.prototype.initDefaults_ = function() {
    this.target = null;
  };
  AnchorElementInteractionHost_OnPointerHover_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AnchorElementInteractionHost_OnPointerHover_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AnchorElementInteractionHost_OnPointerHover_Params.target
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AnchorElementInteractionHost_OnPointerHover_Params.encodedSize = codec.kStructHeaderSize + 8;

  AnchorElementInteractionHost_OnPointerHover_Params.decode = function(decoder) {
    var packed;
    var val = new AnchorElementInteractionHost_OnPointerHover_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.target =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  AnchorElementInteractionHost_OnPointerHover_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AnchorElementInteractionHost_OnPointerHover_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.target);
  };
  var kAnchorElementInteractionHost_OnPointerDown_Name = 0;
  var kAnchorElementInteractionHost_OnPointerHover_Name = 1;

  function AnchorElementInteractionHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AnchorElementInteractionHost,
                                                   handleOrPtrInfo);
  }

  function AnchorElementInteractionHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AnchorElementInteractionHost, associatedInterfacePtrInfo);
  }

  AnchorElementInteractionHostAssociatedPtr.prototype =
      Object.create(AnchorElementInteractionHostPtr.prototype);
  AnchorElementInteractionHostAssociatedPtr.prototype.constructor =
      AnchorElementInteractionHostAssociatedPtr;

  function AnchorElementInteractionHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  AnchorElementInteractionHostPtr.prototype.onPointerDown = function() {
    return AnchorElementInteractionHostProxy.prototype.onPointerDown
        .apply(this.ptr.getProxy(), arguments);
  };

  AnchorElementInteractionHostProxy.prototype.onPointerDown = function(target) {
    var params_ = new AnchorElementInteractionHost_OnPointerDown_Params();
    params_.target = target;
    var builder = new codec.MessageV0Builder(
        kAnchorElementInteractionHost_OnPointerDown_Name,
        codec.align(AnchorElementInteractionHost_OnPointerDown_Params.encodedSize));
    builder.encodeStruct(AnchorElementInteractionHost_OnPointerDown_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AnchorElementInteractionHostPtr.prototype.onPointerHover = function() {
    return AnchorElementInteractionHostProxy.prototype.onPointerHover
        .apply(this.ptr.getProxy(), arguments);
  };

  AnchorElementInteractionHostProxy.prototype.onPointerHover = function(target) {
    var params_ = new AnchorElementInteractionHost_OnPointerHover_Params();
    params_.target = target;
    var builder = new codec.MessageV0Builder(
        kAnchorElementInteractionHost_OnPointerHover_Name,
        codec.align(AnchorElementInteractionHost_OnPointerHover_Params.encodedSize));
    builder.encodeStruct(AnchorElementInteractionHost_OnPointerHover_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AnchorElementInteractionHostStub(delegate) {
    this.delegate_ = delegate;
  }
  AnchorElementInteractionHostStub.prototype.onPointerDown = function(target) {
    return this.delegate_ && this.delegate_.onPointerDown && this.delegate_.onPointerDown(target);
  }
  AnchorElementInteractionHostStub.prototype.onPointerHover = function(target) {
    return this.delegate_ && this.delegate_.onPointerHover && this.delegate_.onPointerHover(target);
  }

  AnchorElementInteractionHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAnchorElementInteractionHost_OnPointerDown_Name:
      var params = reader.decodeStruct(AnchorElementInteractionHost_OnPointerDown_Params);
      this.onPointerDown(params.target);
      return true;
    case kAnchorElementInteractionHost_OnPointerHover_Name:
      var params = reader.decodeStruct(AnchorElementInteractionHost_OnPointerHover_Params);
      this.onPointerHover(params.target);
      return true;
    default:
      return false;
    }
  };

  AnchorElementInteractionHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAnchorElementInteractionHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAnchorElementInteractionHost_OnPointerDown_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AnchorElementInteractionHost_OnPointerDown_Params;
      break;
      case kAnchorElementInteractionHost_OnPointerHover_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AnchorElementInteractionHost_OnPointerHover_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAnchorElementInteractionHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AnchorElementInteractionHost = {
    name: 'blink.mojom.AnchorElementInteractionHost',
    kVersion: 0,
    ptrClass: AnchorElementInteractionHostPtr,
    proxyClass: AnchorElementInteractionHostProxy,
    stubClass: AnchorElementInteractionHostStub,
    validateRequest: validateAnchorElementInteractionHostRequest,
    validateResponse: null,
  };
  AnchorElementInteractionHostStub.prototype.validator = validateAnchorElementInteractionHostRequest;
  AnchorElementInteractionHostProxy.prototype.validator = null;
  exports.AnchorElementInteractionHost = AnchorElementInteractionHost;
  exports.AnchorElementInteractionHostPtr = AnchorElementInteractionHostPtr;
  exports.AnchorElementInteractionHostAssociatedPtr = AnchorElementInteractionHostAssociatedPtr;
})();