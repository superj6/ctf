// media/mojo/mojom/gpu_accelerated_video_decoder.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/mojo/mojom/gpu_accelerated_video_decoder.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('media.mojom');
  var media_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/media_types.mojom', 'media_types.mojom.js');
  }
  var video_decoder$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/video_decoder.mojom', 'video_decoder.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var color_space$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/color_space.mojom', '../../../ui/gfx/mojom/color_space.mojom.js');
  }



  function VideoDecodeAcceleratorConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoDecodeAcceleratorConfig.prototype.initDefaults_ = function() {
  };
  VideoDecodeAcceleratorConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoDecodeAcceleratorConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoDecodeAcceleratorConfig.encodedSize = codec.kStructHeaderSize + 0;

  VideoDecodeAcceleratorConfig.decode = function(decoder) {
    var packed;
    var val = new VideoDecodeAcceleratorConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VideoDecodeAcceleratorConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoDecodeAcceleratorConfig.encodedSize);
    encoder.writeUint32(0);
  };
  function BitstreamBuffer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BitstreamBuffer.prototype.initDefaults_ = function() {
  };
  BitstreamBuffer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BitstreamBuffer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BitstreamBuffer.encodedSize = codec.kStructHeaderSize + 0;

  BitstreamBuffer.decode = function(decoder) {
    var packed;
    var val = new BitstreamBuffer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BitstreamBuffer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BitstreamBuffer.encodedSize);
    encoder.writeUint32(0);
  };
  function PictureBufferAssignment(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PictureBufferAssignment.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.textureIds = null;
  };
  PictureBufferAssignment.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PictureBufferAssignment.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PictureBufferAssignment.textureIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PictureBufferAssignment.encodedSize = codec.kStructHeaderSize + 16;

  PictureBufferAssignment.decode = function(decoder) {
    var packed;
    var val = new PictureBufferAssignment();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.textureIds =
        decoder.decodeArrayPointer(codec.Uint32);
    return val;
  };

  PictureBufferAssignment.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PictureBufferAssignment.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint32, val.textureIds);
  };
  function PictureReadyParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PictureReadyParams.prototype.initDefaults_ = function() {
    this.pictureBufferId = 0;
    this.bitstreamBufferId = 0;
    this.visibleRect = null;
    this.colorSpace = null;
    this.allowOverlay = false;
    this.readLockFencesEnabled = false;
    this.sizeChanged = false;
    this.surfaceTexture = false;
    this.wantsPromotionHint = false;
  };
  PictureReadyParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PictureReadyParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate PictureReadyParams.visibleRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PictureReadyParams.colorSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, color_space$.ColorSpace, false);
    if (err !== validator.validationError.NONE)
        return err;






    return validator.validationError.NONE;
  };

  PictureReadyParams.encodedSize = codec.kStructHeaderSize + 32;

  PictureReadyParams.decode = function(decoder) {
    var packed;
    var val = new PictureReadyParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pictureBufferId =
        decoder.decodeStruct(codec.Int32);
    val.bitstreamBufferId =
        decoder.decodeStruct(codec.Int32);
    val.visibleRect =
        decoder.decodeStructPointer(geometry$.Rect);
    val.colorSpace =
        decoder.decodeStructPointer(color_space$.ColorSpace);
    packed = decoder.readUint8();
    val.allowOverlay = (packed >> 0) & 1 ? true : false;
    val.readLockFencesEnabled = (packed >> 1) & 1 ? true : false;
    val.sizeChanged = (packed >> 2) & 1 ? true : false;
    val.surfaceTexture = (packed >> 3) & 1 ? true : false;
    val.wantsPromotionHint = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PictureReadyParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PictureReadyParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.pictureBufferId);
    encoder.encodeStruct(codec.Int32, val.bitstreamBufferId);
    encoder.encodeStructPointer(geometry$.Rect, val.visibleRect);
    encoder.encodeStructPointer(color_space$.ColorSpace, val.colorSpace);
    packed = 0;
    packed |= (val.allowOverlay & 1) << 0
    packed |= (val.readLockFencesEnabled & 1) << 1
    packed |= (val.sizeChanged & 1) << 2
    packed |= (val.surfaceTexture & 1) << 3
    packed |= (val.wantsPromotionHint & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.prototype.initDefaults_ = function() {
    this.config = null;
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VideoDecodeAcceleratorConfig, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 12, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.encodedSize = codec.kStructHeaderSize + 24;

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config =
        decoder.decodeStructPointer(VideoDecodeAcceleratorConfig);
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VideoDecodeAcceleratorConfig, val.config);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoder_Decode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_Decode_Params.prototype.initDefaults_ = function() {
    this.buffer = null;
  };
  GpuAcceleratedVideoDecoder_Decode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_Decode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoder_Decode_Params.buffer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, BitstreamBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_Decode_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoder_Decode_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_Decode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.buffer =
        decoder.decodeStructPointer(BitstreamBuffer);
    return val;
  };

  GpuAcceleratedVideoDecoder_Decode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_Decode_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(BitstreamBuffer, val.buffer);
  };
  function GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.prototype.initDefaults_ = function() {
    this.assignments = null;
  };
  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.assignments
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(PictureBufferAssignment), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.assignments =
        decoder.decodeArrayPointer(new codec.PointerTo(PictureBufferAssignment));
    return val;
  };

  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(PictureBufferAssignment), val.assignments);
  };
  function GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.prototype.initDefaults_ = function() {
    this.pictureBufferId = 0;
  };
  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pictureBufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.pictureBufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoder_Flush_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_Flush_Params.prototype.initDefaults_ = function() {
  };
  GpuAcceleratedVideoDecoder_Flush_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_Flush_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_Flush_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuAcceleratedVideoDecoder_Flush_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_Flush_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuAcceleratedVideoDecoder_Flush_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_Flush_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuAcceleratedVideoDecoder_Flush_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_Flush_ResponseParams.prototype.initDefaults_ = function() {
  };
  GpuAcceleratedVideoDecoder_Flush_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_Flush_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_Flush_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  GpuAcceleratedVideoDecoder_Flush_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_Flush_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuAcceleratedVideoDecoder_Flush_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_Flush_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuAcceleratedVideoDecoder_Reset_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_Reset_Params.prototype.initDefaults_ = function() {
  };
  GpuAcceleratedVideoDecoder_Reset_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_Reset_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_Reset_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuAcceleratedVideoDecoder_Reset_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_Reset_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuAcceleratedVideoDecoder_Reset_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_Reset_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuAcceleratedVideoDecoder_Reset_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_Reset_ResponseParams.prototype.initDefaults_ = function() {
  };
  GpuAcceleratedVideoDecoder_Reset_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_Reset_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_Reset_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  GpuAcceleratedVideoDecoder_Reset_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_Reset_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuAcceleratedVideoDecoder_Reset_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_Reset_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuAcceleratedVideoDecoder_SetOverlayInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.prototype.initDefaults_ = function() {
    this.overlayInfo = null;
  };
  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.overlayInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, video_decoder$.OverlayInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoder_SetOverlayInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.overlayInfo =
        decoder.decodeStructPointer(video_decoder$.OverlayInfo);
    return val;
  };

  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(video_decoder$.OverlayInfo, val.overlayInfo);
  };
  function GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.prototype.initDefaults_ = function() {
    this.success = false;
  };
  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.prototype.initDefaults_ = function() {
    this.numFrames = 0;
    this.format = 0;
    this.numTexturesPerFrame = 0;
    this.textureTarget = 0;
    this.bufferSize = null;
  };
  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.format
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, media_types$.VideoPixelFormat);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.bufferSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.encodedSize = codec.kStructHeaderSize + 24;

  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.numFrames =
        decoder.decodeStruct(codec.Uint32);
    val.format =
        decoder.decodeStruct(new codec.Enum(media_types$.VideoPixelFormat));
    val.numTexturesPerFrame =
        decoder.decodeStruct(codec.Uint32);
    val.textureTarget =
        decoder.decodeStruct(codec.Uint32);
    val.bufferSize =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.numFrames);
    encoder.encodeStruct(codec.Int32, val.format);
    encoder.encodeStruct(codec.Uint32, val.numTexturesPerFrame);
    encoder.encodeStruct(codec.Uint32, val.textureTarget);
    encoder.encodeStructPointer(geometry$.Size, val.bufferSize);
  };
  function GpuAcceleratedVideoDecoderClient_OnPictureReady_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PictureReadyParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderClient_OnPictureReady_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(PictureReadyParams);
    return val;
  };

  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PictureReadyParams, val.params);
  };
  function GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuAcceleratedVideoDecoderClient_OnError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuAcceleratedVideoDecoderClient_OnError_Params.prototype.initDefaults_ = function() {
    this.errorId = 0;
  };
  GpuAcceleratedVideoDecoderClient_OnError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuAcceleratedVideoDecoderClient_OnError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuAcceleratedVideoDecoderClient_OnError_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuAcceleratedVideoDecoderClient_OnError_Params.decode = function(decoder) {
    var packed;
    var val = new GpuAcceleratedVideoDecoderClient_OnError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.errorId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuAcceleratedVideoDecoderClient_OnError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuAcceleratedVideoDecoderClient_OnError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.errorId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kGpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Name = 1025836244;

  function GpuAcceleratedVideoDecoderProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GpuAcceleratedVideoDecoderProvider,
                                                   handleOrPtrInfo);
  }

  function GpuAcceleratedVideoDecoderProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GpuAcceleratedVideoDecoderProvider, associatedInterfacePtrInfo);
  }

  GpuAcceleratedVideoDecoderProviderAssociatedPtr.prototype =
      Object.create(GpuAcceleratedVideoDecoderProviderPtr.prototype);
  GpuAcceleratedVideoDecoderProviderAssociatedPtr.prototype.constructor =
      GpuAcceleratedVideoDecoderProviderAssociatedPtr;

  function GpuAcceleratedVideoDecoderProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  GpuAcceleratedVideoDecoderProviderPtr.prototype.createAcceleratedVideoDecoder = function() {
    return GpuAcceleratedVideoDecoderProviderProxy.prototype.createAcceleratedVideoDecoder
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProviderProxy.prototype.createAcceleratedVideoDecoder = function(config, receiver, client) {
    var params_ = new GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params();
    params_.config = config;
    params_.receiver = receiver;
    params_.client = client;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kGpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Name,
          codec.align(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function GpuAcceleratedVideoDecoderProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  GpuAcceleratedVideoDecoderProviderStub.prototype.createAcceleratedVideoDecoder = function(config, receiver, client) {
    return this.delegate_ && this.delegate_.createAcceleratedVideoDecoder && this.delegate_.createAcceleratedVideoDecoder(config, receiver, client);
  }

  GpuAcceleratedVideoDecoderProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  GpuAcceleratedVideoDecoderProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params);
      this.createAcceleratedVideoDecoder(params.config, params.receiver, params.client).then(function(response) {
        var responseParams =
            new GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV2Builder(
            kGpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Name,
            codec.align(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateGpuAcceleratedVideoDecoderProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Name:
        if (message.expectsResponse())
          paramsClass = GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGpuAcceleratedVideoDecoderProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kGpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Name:
        if (message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var GpuAcceleratedVideoDecoderProvider = {
    name: 'media.mojom.GpuAcceleratedVideoDecoderProvider',
    kVersion: 0,
    ptrClass: GpuAcceleratedVideoDecoderProviderPtr,
    proxyClass: GpuAcceleratedVideoDecoderProviderProxy,
    stubClass: GpuAcceleratedVideoDecoderProviderStub,
    validateRequest: validateGpuAcceleratedVideoDecoderProviderRequest,
    validateResponse: validateGpuAcceleratedVideoDecoderProviderResponse,
  };
  GpuAcceleratedVideoDecoderProviderStub.prototype.validator = validateGpuAcceleratedVideoDecoderProviderRequest;
  GpuAcceleratedVideoDecoderProviderProxy.prototype.validator = validateGpuAcceleratedVideoDecoderProviderResponse;
  var kGpuAcceleratedVideoDecoder_Decode_Name = 471861122;
  var kGpuAcceleratedVideoDecoder_AssignPictureBuffers_Name = 999234065;
  var kGpuAcceleratedVideoDecoder_ReusePictureBuffer_Name = 1103219887;
  var kGpuAcceleratedVideoDecoder_Flush_Name = 818253086;
  var kGpuAcceleratedVideoDecoder_Reset_Name = 1346851110;
  var kGpuAcceleratedVideoDecoder_SetOverlayInfo_Name = 1322259021;

  function GpuAcceleratedVideoDecoderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GpuAcceleratedVideoDecoder,
                                                   handleOrPtrInfo);
  }

  function GpuAcceleratedVideoDecoderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GpuAcceleratedVideoDecoder, associatedInterfacePtrInfo);
  }

  GpuAcceleratedVideoDecoderAssociatedPtr.prototype =
      Object.create(GpuAcceleratedVideoDecoderPtr.prototype);
  GpuAcceleratedVideoDecoderAssociatedPtr.prototype.constructor =
      GpuAcceleratedVideoDecoderAssociatedPtr;

  function GpuAcceleratedVideoDecoderProxy(receiver) {
    this.receiver_ = receiver;
  }
  GpuAcceleratedVideoDecoderPtr.prototype.decode = function() {
    return GpuAcceleratedVideoDecoderProxy.prototype.decode
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProxy.prototype.decode = function(buffer) {
    var params_ = new GpuAcceleratedVideoDecoder_Decode_Params();
    params_.buffer = buffer;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoder_Decode_Name,
        codec.align(GpuAcceleratedVideoDecoder_Decode_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoder_Decode_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderPtr.prototype.assignPictureBuffers = function() {
    return GpuAcceleratedVideoDecoderProxy.prototype.assignPictureBuffers
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProxy.prototype.assignPictureBuffers = function(assignments) {
    var params_ = new GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params();
    params_.assignments = assignments;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoder_AssignPictureBuffers_Name,
        codec.align(GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderPtr.prototype.reusePictureBuffer = function() {
    return GpuAcceleratedVideoDecoderProxy.prototype.reusePictureBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProxy.prototype.reusePictureBuffer = function(pictureBufferId) {
    var params_ = new GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params();
    params_.pictureBufferId = pictureBufferId;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoder_ReusePictureBuffer_Name,
        codec.align(GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderPtr.prototype.flush = function() {
    return GpuAcceleratedVideoDecoderProxy.prototype.flush
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProxy.prototype.flush = function() {
    var params_ = new GpuAcceleratedVideoDecoder_Flush_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuAcceleratedVideoDecoder_Flush_Name,
          codec.align(GpuAcceleratedVideoDecoder_Flush_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuAcceleratedVideoDecoder_Flush_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuAcceleratedVideoDecoder_Flush_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuAcceleratedVideoDecoderPtr.prototype.reset = function() {
    return GpuAcceleratedVideoDecoderProxy.prototype.reset
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProxy.prototype.reset = function() {
    var params_ = new GpuAcceleratedVideoDecoder_Reset_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuAcceleratedVideoDecoder_Reset_Name,
          codec.align(GpuAcceleratedVideoDecoder_Reset_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuAcceleratedVideoDecoder_Reset_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuAcceleratedVideoDecoder_Reset_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuAcceleratedVideoDecoderPtr.prototype.setOverlayInfo = function() {
    return GpuAcceleratedVideoDecoderProxy.prototype.setOverlayInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderProxy.prototype.setOverlayInfo = function(overlayInfo) {
    var params_ = new GpuAcceleratedVideoDecoder_SetOverlayInfo_Params();
    params_.overlayInfo = overlayInfo;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoder_SetOverlayInfo_Name,
        codec.align(GpuAcceleratedVideoDecoder_SetOverlayInfo_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoder_SetOverlayInfo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function GpuAcceleratedVideoDecoderStub(delegate) {
    this.delegate_ = delegate;
  }
  GpuAcceleratedVideoDecoderStub.prototype.decode = function(buffer) {
    return this.delegate_ && this.delegate_.decode && this.delegate_.decode(buffer);
  }
  GpuAcceleratedVideoDecoderStub.prototype.assignPictureBuffers = function(assignments) {
    return this.delegate_ && this.delegate_.assignPictureBuffers && this.delegate_.assignPictureBuffers(assignments);
  }
  GpuAcceleratedVideoDecoderStub.prototype.reusePictureBuffer = function(pictureBufferId) {
    return this.delegate_ && this.delegate_.reusePictureBuffer && this.delegate_.reusePictureBuffer(pictureBufferId);
  }
  GpuAcceleratedVideoDecoderStub.prototype.flush = function() {
    return this.delegate_ && this.delegate_.flush && this.delegate_.flush();
  }
  GpuAcceleratedVideoDecoderStub.prototype.reset = function() {
    return this.delegate_ && this.delegate_.reset && this.delegate_.reset();
  }
  GpuAcceleratedVideoDecoderStub.prototype.setOverlayInfo = function(overlayInfo) {
    return this.delegate_ && this.delegate_.setOverlayInfo && this.delegate_.setOverlayInfo(overlayInfo);
  }

  GpuAcceleratedVideoDecoderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuAcceleratedVideoDecoder_Decode_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoder_Decode_Params);
      this.decode(params.buffer);
      return true;
    case kGpuAcceleratedVideoDecoder_AssignPictureBuffers_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params);
      this.assignPictureBuffers(params.assignments);
      return true;
    case kGpuAcceleratedVideoDecoder_ReusePictureBuffer_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params);
      this.reusePictureBuffer(params.pictureBufferId);
      return true;
    case kGpuAcceleratedVideoDecoder_SetOverlayInfo_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoder_SetOverlayInfo_Params);
      this.setOverlayInfo(params.overlayInfo);
      return true;
    default:
      return false;
    }
  };

  GpuAcceleratedVideoDecoderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuAcceleratedVideoDecoder_Flush_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoder_Flush_Params);
      this.flush().then(function(response) {
        var responseParams =
            new GpuAcceleratedVideoDecoder_Flush_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kGpuAcceleratedVideoDecoder_Flush_Name,
            codec.align(GpuAcceleratedVideoDecoder_Flush_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuAcceleratedVideoDecoder_Flush_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGpuAcceleratedVideoDecoder_Reset_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoder_Reset_Params);
      this.reset().then(function(response) {
        var responseParams =
            new GpuAcceleratedVideoDecoder_Reset_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kGpuAcceleratedVideoDecoder_Reset_Name,
            codec.align(GpuAcceleratedVideoDecoder_Reset_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuAcceleratedVideoDecoder_Reset_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateGpuAcceleratedVideoDecoderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGpuAcceleratedVideoDecoder_Decode_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoder_Decode_Params;
      break;
      case kGpuAcceleratedVideoDecoder_AssignPictureBuffers_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params;
      break;
      case kGpuAcceleratedVideoDecoder_ReusePictureBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params;
      break;
      case kGpuAcceleratedVideoDecoder_Flush_Name:
        if (message.expectsResponse())
          paramsClass = GpuAcceleratedVideoDecoder_Flush_Params;
      break;
      case kGpuAcceleratedVideoDecoder_Reset_Name:
        if (message.expectsResponse())
          paramsClass = GpuAcceleratedVideoDecoder_Reset_Params;
      break;
      case kGpuAcceleratedVideoDecoder_SetOverlayInfo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoder_SetOverlayInfo_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGpuAcceleratedVideoDecoderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kGpuAcceleratedVideoDecoder_Flush_Name:
        if (message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoder_Flush_ResponseParams;
        break;
      case kGpuAcceleratedVideoDecoder_Reset_Name:
        if (message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoder_Reset_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var GpuAcceleratedVideoDecoder = {
    name: 'media.mojom.GpuAcceleratedVideoDecoder',
    kVersion: 0,
    ptrClass: GpuAcceleratedVideoDecoderPtr,
    proxyClass: GpuAcceleratedVideoDecoderProxy,
    stubClass: GpuAcceleratedVideoDecoderStub,
    validateRequest: validateGpuAcceleratedVideoDecoderRequest,
    validateResponse: validateGpuAcceleratedVideoDecoderResponse,
  };
  GpuAcceleratedVideoDecoderStub.prototype.validator = validateGpuAcceleratedVideoDecoderRequest;
  GpuAcceleratedVideoDecoderProxy.prototype.validator = validateGpuAcceleratedVideoDecoderResponse;
  var kGpuAcceleratedVideoDecoderClient_OnInitializationComplete_Name = 1629260848;
  var kGpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Name = 1589207301;
  var kGpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Name = 910164146;
  var kGpuAcceleratedVideoDecoderClient_OnPictureReady_Name = 507990586;
  var kGpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Name = 1619222433;
  var kGpuAcceleratedVideoDecoderClient_OnError_Name = 271445434;

  function GpuAcceleratedVideoDecoderClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GpuAcceleratedVideoDecoderClient,
                                                   handleOrPtrInfo);
  }

  function GpuAcceleratedVideoDecoderClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GpuAcceleratedVideoDecoderClient, associatedInterfacePtrInfo);
  }

  GpuAcceleratedVideoDecoderClientAssociatedPtr.prototype =
      Object.create(GpuAcceleratedVideoDecoderClientPtr.prototype);
  GpuAcceleratedVideoDecoderClientAssociatedPtr.prototype.constructor =
      GpuAcceleratedVideoDecoderClientAssociatedPtr;

  function GpuAcceleratedVideoDecoderClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  GpuAcceleratedVideoDecoderClientPtr.prototype.onInitializationComplete = function() {
    return GpuAcceleratedVideoDecoderClientProxy.prototype.onInitializationComplete
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderClientProxy.prototype.onInitializationComplete = function(success) {
    var params_ = new GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params();
    params_.success = success;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoderClient_OnInitializationComplete_Name,
        codec.align(GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderClientPtr.prototype.onBitstreamBufferProcessed = function() {
    return GpuAcceleratedVideoDecoderClientProxy.prototype.onBitstreamBufferProcessed
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderClientProxy.prototype.onBitstreamBufferProcessed = function(bufferId) {
    var params_ = new GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Name,
        codec.align(GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderClientPtr.prototype.onProvidePictureBuffers = function() {
    return GpuAcceleratedVideoDecoderClientProxy.prototype.onProvidePictureBuffers
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderClientProxy.prototype.onProvidePictureBuffers = function(numFrames, format, numTexturesPerFrame, bufferSize, textureTarget) {
    var params_ = new GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params();
    params_.numFrames = numFrames;
    params_.format = format;
    params_.numTexturesPerFrame = numTexturesPerFrame;
    params_.bufferSize = bufferSize;
    params_.textureTarget = textureTarget;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Name,
        codec.align(GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderClientPtr.prototype.onPictureReady = function() {
    return GpuAcceleratedVideoDecoderClientProxy.prototype.onPictureReady
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderClientProxy.prototype.onPictureReady = function(params) {
    var params_ = new GpuAcceleratedVideoDecoderClient_OnPictureReady_Params();
    params_.params = params;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoderClient_OnPictureReady_Name,
        codec.align(GpuAcceleratedVideoDecoderClient_OnPictureReady_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoderClient_OnPictureReady_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderClientPtr.prototype.onDismissPictureBuffer = function() {
    return GpuAcceleratedVideoDecoderClientProxy.prototype.onDismissPictureBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderClientProxy.prototype.onDismissPictureBuffer = function(bufferId) {
    var params_ = new GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Name,
        codec.align(GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuAcceleratedVideoDecoderClientPtr.prototype.onError = function() {
    return GpuAcceleratedVideoDecoderClientProxy.prototype.onError
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuAcceleratedVideoDecoderClientProxy.prototype.onError = function(errorId) {
    var params_ = new GpuAcceleratedVideoDecoderClient_OnError_Params();
    params_.errorId = errorId;
    var builder = new codec.MessageV0Builder(
        kGpuAcceleratedVideoDecoderClient_OnError_Name,
        codec.align(GpuAcceleratedVideoDecoderClient_OnError_Params.encodedSize));
    builder.encodeStruct(GpuAcceleratedVideoDecoderClient_OnError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function GpuAcceleratedVideoDecoderClientStub(delegate) {
    this.delegate_ = delegate;
  }
  GpuAcceleratedVideoDecoderClientStub.prototype.onInitializationComplete = function(success) {
    return this.delegate_ && this.delegate_.onInitializationComplete && this.delegate_.onInitializationComplete(success);
  }
  GpuAcceleratedVideoDecoderClientStub.prototype.onBitstreamBufferProcessed = function(bufferId) {
    return this.delegate_ && this.delegate_.onBitstreamBufferProcessed && this.delegate_.onBitstreamBufferProcessed(bufferId);
  }
  GpuAcceleratedVideoDecoderClientStub.prototype.onProvidePictureBuffers = function(numFrames, format, numTexturesPerFrame, bufferSize, textureTarget) {
    return this.delegate_ && this.delegate_.onProvidePictureBuffers && this.delegate_.onProvidePictureBuffers(numFrames, format, numTexturesPerFrame, bufferSize, textureTarget);
  }
  GpuAcceleratedVideoDecoderClientStub.prototype.onPictureReady = function(params) {
    return this.delegate_ && this.delegate_.onPictureReady && this.delegate_.onPictureReady(params);
  }
  GpuAcceleratedVideoDecoderClientStub.prototype.onDismissPictureBuffer = function(bufferId) {
    return this.delegate_ && this.delegate_.onDismissPictureBuffer && this.delegate_.onDismissPictureBuffer(bufferId);
  }
  GpuAcceleratedVideoDecoderClientStub.prototype.onError = function(errorId) {
    return this.delegate_ && this.delegate_.onError && this.delegate_.onError(errorId);
  }

  GpuAcceleratedVideoDecoderClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuAcceleratedVideoDecoderClient_OnInitializationComplete_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params);
      this.onInitializationComplete(params.success);
      return true;
    case kGpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params);
      this.onBitstreamBufferProcessed(params.bufferId);
      return true;
    case kGpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params);
      this.onProvidePictureBuffers(params.numFrames, params.format, params.numTexturesPerFrame, params.bufferSize, params.textureTarget);
      return true;
    case kGpuAcceleratedVideoDecoderClient_OnPictureReady_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderClient_OnPictureReady_Params);
      this.onPictureReady(params.params);
      return true;
    case kGpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params);
      this.onDismissPictureBuffer(params.bufferId);
      return true;
    case kGpuAcceleratedVideoDecoderClient_OnError_Name:
      var params = reader.decodeStruct(GpuAcceleratedVideoDecoderClient_OnError_Params);
      this.onError(params.errorId);
      return true;
    default:
      return false;
    }
  };

  GpuAcceleratedVideoDecoderClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateGpuAcceleratedVideoDecoderClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGpuAcceleratedVideoDecoderClient_OnInitializationComplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params;
      break;
      case kGpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params;
      break;
      case kGpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params;
      break;
      case kGpuAcceleratedVideoDecoderClient_OnPictureReady_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderClient_OnPictureReady_Params;
      break;
      case kGpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params;
      break;
      case kGpuAcceleratedVideoDecoderClient_OnError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuAcceleratedVideoDecoderClient_OnError_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGpuAcceleratedVideoDecoderClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var GpuAcceleratedVideoDecoderClient = {
    name: 'media.mojom.GpuAcceleratedVideoDecoderClient',
    kVersion: 0,
    ptrClass: GpuAcceleratedVideoDecoderClientPtr,
    proxyClass: GpuAcceleratedVideoDecoderClientProxy,
    stubClass: GpuAcceleratedVideoDecoderClientStub,
    validateRequest: validateGpuAcceleratedVideoDecoderClientRequest,
    validateResponse: null,
  };
  GpuAcceleratedVideoDecoderClientStub.prototype.validator = validateGpuAcceleratedVideoDecoderClientRequest;
  GpuAcceleratedVideoDecoderClientProxy.prototype.validator = null;
  exports.VideoDecodeAcceleratorConfig = VideoDecodeAcceleratorConfig;
  exports.BitstreamBuffer = BitstreamBuffer;
  exports.PictureBufferAssignment = PictureBufferAssignment;
  exports.PictureReadyParams = PictureReadyParams;
  exports.GpuAcceleratedVideoDecoderProvider = GpuAcceleratedVideoDecoderProvider;
  exports.GpuAcceleratedVideoDecoderProviderPtr = GpuAcceleratedVideoDecoderProviderPtr;
  exports.GpuAcceleratedVideoDecoderProviderAssociatedPtr = GpuAcceleratedVideoDecoderProviderAssociatedPtr;
  exports.GpuAcceleratedVideoDecoder = GpuAcceleratedVideoDecoder;
  exports.GpuAcceleratedVideoDecoderPtr = GpuAcceleratedVideoDecoderPtr;
  exports.GpuAcceleratedVideoDecoderAssociatedPtr = GpuAcceleratedVideoDecoderAssociatedPtr;
  exports.GpuAcceleratedVideoDecoderClient = GpuAcceleratedVideoDecoderClient;
  exports.GpuAcceleratedVideoDecoderClientPtr = GpuAcceleratedVideoDecoderClientPtr;
  exports.GpuAcceleratedVideoDecoderClientAssociatedPtr = GpuAcceleratedVideoDecoderClientAssociatedPtr;
})();