// ui/gfx/mojom/hdr_metadata.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/gfx/mojom/hdr_metadata.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('gfx.mojom');
  var skcolorspace_primaries$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolorspace_primaries.mojom', '../../../skia/public/mojom/skcolorspace_primaries.mojom.js');
  }


  var HDRMode = {};
  HDRMode.kDefault = 0;
  HDRMode.kExtended = 1;
  HDRMode.MIN_VALUE = 0;
  HDRMode.MAX_VALUE = 1;

  HDRMode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  HDRMode.toKnownEnumValue = function(value) {
    return value;
  };

  HDRMode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ColorVolumeMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ColorVolumeMetadata.prototype.initDefaults_ = function() {
    this.primaries = null;
    this.luminanceMax = 0;
    this.luminanceMin = 0;
  };
  ColorVolumeMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ColorVolumeMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ColorVolumeMetadata.primaries
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolorspace_primaries$.SkColorSpacePrimaries, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ColorVolumeMetadata.encodedSize = codec.kStructHeaderSize + 16;

  ColorVolumeMetadata.decode = function(decoder) {
    var packed;
    var val = new ColorVolumeMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.primaries =
        decoder.decodeStructPointer(skcolorspace_primaries$.SkColorSpacePrimaries);
    val.luminanceMax =
        decoder.decodeStruct(codec.Float);
    val.luminanceMin =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  ColorVolumeMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ColorVolumeMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolorspace_primaries$.SkColorSpacePrimaries, val.primaries);
    encoder.encodeStruct(codec.Float, val.luminanceMax);
    encoder.encodeStruct(codec.Float, val.luminanceMin);
  };
  function HDRMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HDRMetadata.prototype.initDefaults_ = function() {
    this.colorVolumeMetadata = null;
    this.maxContentLightLevel = 0;
    this.maxFrameAverageLightLevel = 0;
  };
  HDRMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HDRMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HDRMetadata.colorVolumeMetadata
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ColorVolumeMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  HDRMetadata.encodedSize = codec.kStructHeaderSize + 16;

  HDRMetadata.decode = function(decoder) {
    var packed;
    var val = new HDRMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.colorVolumeMetadata =
        decoder.decodeStructPointer(ColorVolumeMetadata);
    val.maxContentLightLevel =
        decoder.decodeStruct(codec.Uint32);
    val.maxFrameAverageLightLevel =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  HDRMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HDRMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ColorVolumeMetadata, val.colorVolumeMetadata);
    encoder.encodeStruct(codec.Uint32, val.maxContentLightLevel);
    encoder.encodeStruct(codec.Uint32, val.maxFrameAverageLightLevel);
  };
  exports.HDRMode = HDRMode;
  exports.ColorVolumeMetadata = ColorVolumeMetadata;
  exports.HDRMetadata = HDRMetadata;
})();